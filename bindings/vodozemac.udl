namespace vodozemac {
    string version();
    string base64_encode(sequence<u8> input);
    [Throws=VodozemacError] sequence<u8> base64_decode(string input);
};

[Error]
enum VodozemacError {
    "PickleError",
    "DecodeError", 
    "LibolmPickleError",
    "SessionCreationError",
    "InvalidSignature",
    "InvalidMac",
    "InvalidKey",
    "InvalidBase64"
};

enum SessionOrdering {
    "Stream",
    "Strict"
};

dictionary IdentityKeysWrapper {
    sequence<u8> curve25519;
    sequence<u8> ed25519;
};

dictionary Curve25519PublicKeyWrapper {
    sequence<u8> key;
};

dictionary Ed25519PublicKeyWrapper {
    sequence<u8> key;
};

dictionary Ed25519SignatureWrapper {
    sequence<u8> signature;
};

dictionary SasBytesWrapper {
    sequence<u8> bytes;
};

dictionary MacWrapper {
    sequence<u8> mac;
};

dictionary CheckCodeWrapper {
    sequence<u8> check_code;
};

dictionary ExportedSessionKeyWrapper {
    string key;
};

dictionary InboundCreationResultWrapper {
    InboundGroupSessionWrapper session;
    string plaintext;
};

dictionary DecryptedMessageWrapper {
    string plaintext;
    u32 message_index;
};

interface AccountWrapper {
    constructor();
    [Throws=VodozemacError] constructor from_pickle(string pickle, string passphrase);
    [Throws=VodozemacError] constructor from_libolm_pickle(string pickle, string passphrase);
    
    IdentityKeysWrapper identity_keys();
    Ed25519PublicKeyWrapper ed25519_key();
    Curve25519PublicKeyWrapper curve25519_key();
    Ed25519SignatureWrapper sign(string message);
    record<string, Curve25519PublicKeyWrapper> one_time_keys();
    record<string, Curve25519PublicKeyWrapper> fallback_key();
    
    void generate_one_time_keys(u32 count);
    void generate_fallback_key();
    void mark_keys_as_published();
    u32 max_number_of_one_time_keys();
    string pickle(string passphrase);
    
    [Throws=VodozemacError] SessionWrapper create_outbound_session(
        Curve25519PublicKeyWrapper identity_key, 
        Curve25519PublicKeyWrapper one_time_key
    );
    [Throws=VodozemacError] InboundCreationResultWrapper create_inbound_session(
        Curve25519PublicKeyWrapper identity_key,
        string message
    );
};

interface SessionWrapper {
    [Throws=VodozemacError] constructor from_pickle(string pickle, string passphrase);
    [Throws=VodozemacError] constructor from_libolm_pickle(string pickle, string passphrase);
    
    string session_id();
    [Throws=VodozemacError] boolean session_matches(string message);
    string encrypt(string plaintext);
    [Throws=VodozemacError] string decrypt(string message);
    string pickle(string passphrase);
};

interface GroupSessionWrapper {
    constructor();
    [Throws=VodozemacError] constructor from_pickle(string pickle, string passphrase);
    
    string session_id();
    ExportedSessionKeyWrapper session_key();
    u32 message_index();
    string encrypt(string plaintext);
    string pickle(string passphrase);
};

interface InboundGroupSessionWrapper {
    [Throws=VodozemacError] constructor new(string session_key, SessionOrdering session_config);
    [Throws=VodozemacError] constructor from_pickle(string pickle, string passphrase);
    [Throws=VodozemacError] constructor import(string session_key);
    
    string session_id();
    u32 first_known_index();
    [Throws=VodozemacError] DecryptedMessageWrapper decrypt(string message);
    ExportedSessionKeyWrapper? export_at(u32 message_index);
    string pickle(string passphrase);
};

interface SasWrapper {
    constructor();
    
    Curve25519PublicKeyWrapper public_key();
    [Throws=VodozemacError] EstablishedSasWrapper diffie_hellman(Curve25519PublicKeyWrapper other_key);
};

interface EstablishedSasWrapper {
    SasBytesWrapper bytes(string info);
    MacWrapper calculate_mac(string message, string info);
    [Throws=VodozemacError] void verify_mac(string message, string info, MacWrapper tag);
    sequence<u32> generate_bytes_emoji(SasBytesWrapper sas_bytes);
    sequence<u16> generate_bytes_decimal(SasBytesWrapper sas_bytes);
};

interface EciesWrapper {
    constructor();
    
    Curve25519PublicKeyWrapper public_key();
    [Throws=VodozemacError] EstablishedEciesWrapper diffie_hellman(Curve25519PublicKeyWrapper other_key);
};

interface EstablishedEciesWrapper {
    string encrypt(string plaintext);
    [Throws=VodozemacError] string decrypt(string message);
    CheckCodeWrapper check_code();
};
