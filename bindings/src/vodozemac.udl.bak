// ‚ö†Ô∏è  WARNING: DO NOT USE THIS FILE! ‚ö†Ô∏è 
//
// This is a backup of the original UDL-based interface definitions.
// These caused UniFFI checksum mismatches and should NOT be used.
//
// ‚ùå PROBLEM: UDL interfaces for complex objects cause checksum validation failures
// ‚úÖ SOLUTION: Use procedural macros (#[uniffi::export]) instead
//
// For expanding vodozemac bindings:
// 1. See README.md for the correct approach
// 2. See UNIFFI_EXPANSION_GUIDE.md for technical details
// 3. Use procedural macros in lib.rs, NOT UDL interfaces
// 4. Check src/lib.rs for working examples
//
// This file is kept only for:
// - Historical reference
// - Understanding what NOT to do
// - UDL definitions that still work (enums, errors, simple functions)

namespace vodozemac {
    // Base64 utility functions - THESE STILL WORK WITH UDL
    [Throws=VodozemacError]
    bytes base64_decode(string input);
    string base64_encode(bytes input);
    
    // Version function - THESE STILL WORK WITH UDL
    string get_version();
};

// Unified error type for all vodozemac operations - THESE STILL WORK WITH UDL
[Error]
enum VodozemacError {
    "Base64Decode",
    "ProtoBufDecode", 
    "Decode",
    "DehydratedDevice",
    "Key",
    "LibolmPickle",
    "Pickle",
    "Signature",
    "Ecies",
    "MegolmDecryption",
    "OlmDecryption",
    "SessionCreation",
    "SessionKeyDecode",
    "Sas",
};

// Enums - THESE STILL WORK WITH UDL
enum MessageType {
    "Normal",
    "PreKey",
};

enum SessionOrdering {
    "Equal",
    "Better",
    "Worse", 
    "Unconnected",
};

// ‚ùå‚ùå‚ùå THE FOLLOWING INTERFACE DEFINITIONS CAUSED CHECKSUM MISMATCHES ‚ùå‚ùå‚ùå
// They have been moved to procedural macros in lib.rs
// DO NOT UNCOMMENT OR USE THESE!

// ‚ùå Key ID struct - NOW IMPLEMENTED WITH PROCEDURAL MACROS
// interface KeyId {
//     [Name=from_u64]
//     constructor(u64 value);
//     string to_base64();
// };

// ‚ùå Curve25519 Public Key - NOW IMPLEMENTED WITH PROCEDURAL MACROS  
// interface Curve25519PublicKey {
//     [Throws=VodozemacError, Name=from_base64]
//     constructor(string input);
//     [Throws=VodozemacError, Name=from_slice]
//     constructor(bytes bytes);
//     [Name=from_bytes]
//     constructor(bytes bytes);
//     
//     bytes to_bytes();
//     bytes as_bytes();
//     bytes to_vec();
//     string to_base64();
// };

// ‚ùå Curve25519 Secret Key - NOW IMPLEMENTED WITH PROCEDURAL MACROS
// interface Curve25519SecretKey {
//     constructor();
//     [Name=from_slice]
//     constructor(bytes bytes);
//     
//     bytes to_bytes();
//     Curve25519PublicKey public_key();
// };

// üéØ TO ADD NEW STRUCTS/OBJECTS:
// 1. DO NOT add interface definitions here
// 2. Use #[derive(uniffi::Object)] and #[uniffi::export] in lib.rs
// 3. Follow the patterns in src/lib.rs (KeyId, Curve25519PublicKey, Curve25519SecretKey)
// 4. See documentation: README.md, UNIFFI_EXPANSION_GUIDE.md, QUICK_REFERENCE.md
