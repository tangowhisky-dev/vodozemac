// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(vodozemacFFI)
import vodozemacFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_vodozemac_bindings_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_vodozemac_bindings_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureVodozemacBindingsInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
// Initial value and increment amount for handles. 
// These ensure that SWIFT handles always have the lowest bit set
fileprivate let UNIFFI_HANDLEMAP_INITIAL: UInt64 = 1
fileprivate let UNIFFI_HANDLEMAP_DELTA: UInt64 = 2

fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = UNIFFI_HANDLEMAP_INITIAL

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            return doInsert(obj)
        }
    }

    // Low-level insert function, this assumes `lock` is held.
    private func doInsert(_ obj: T) -> UInt64 {
        let handle = currentHandle
        currentHandle += UNIFFI_HANDLEMAP_DELTA
        map[handle] = obj
        return handle
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

     func clone(handle: UInt64) throws -> UInt64 {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return doInsert(obj)
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




/**
 * An Olm Account manages all cryptographic keys used on a device.
 */
public protocol AccountProtocol: AnyObject, Sendable {
    
    /**
     * Create a Session from the given PreKeyMessage message and identity key
     */
    func createInboundSession(theirIdentityKey: Curve25519PublicKey, preKeyMessage: PreKeyMessage) throws  -> OlmInboundCreationResult
    
    /**
     * Create a Session with the given identity key and one-time key.
     */
    func createOutboundSession(sessionConfig: SessionConfig, identityKey: Curve25519PublicKey, oneTimeKey: Curve25519PublicKey)  -> Session
    
    /**
     * Get a copy of the account's public Curve25519 key
     */
    func curve25519Key()  -> Curve25519PublicKey
    
    /**
     * Get a copy of the account's public Ed25519 key
     */
    func ed25519Key()  -> Ed25519PublicKey
    
    /**
     * Get the currently unpublished fallback key.
     * The Account stores at most two private parts of the fallback key.
     */
    func forgetFallbackKey()  -> Bool
    
    /**
     * Generate a single new fallback key.
     */
    func generateFallbackKey()  -> Curve25519PublicKey?
    
    /**
     * Generates the supplied number of one time keys.
     */
    func generateOneTimeKeys(count: UInt64)  -> OneTimeKeyGenerationResult
    
    /**
     * Get the IdentityKeys of this Account
     */
    func identityKeys()  -> IdentityKeys
    
    /**
     * Mark all currently unpublished one-time and fallback keys as published.
     */
    func markKeysAsPublished() 
    
    /**
     * Get the maximum number of one-time keys the client should keep on the server.
     */
    func maxNumberOfOneTimeKeys()  -> UInt64
    
    /**
     * Get the currently unpublished one-time keys.
     */
    func oneTimeKeys()  -> [OneTimeKeyPair]
    
    /**
     * Convert the account into a struct which implements serde::Serialize and serde::Deserialize.
     */
    func pickle()  -> AccountPickle
    
    /**
     * Sign the given message using our Ed25519 identity key.
     */
    func sign(message: Data)  -> Ed25519Signature
    
    /**
     * Get the number of one-time keys we have stored locally.
     */
    func storedOneTimeKeyCount()  -> UInt64
    
    /**
     * Create a dehydrated device from the account.
     */
    func toDehydratedDevice(key: Data) throws  -> DehydratedDeviceResult
    
    /**
     * Pickle an Account into a libolm pickle format.
     */
    func toLibolmPickle(pickleKey: Data) throws  -> String
    
}
/**
 * An Olm Account manages all cryptographic keys used on a device.
 */
open class Account: AccountProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_account(self.handle, $0) }
    }
    /**
     * Create a new Account with fresh identity and one-time keys.
     */
public convenience init() {
    let handle =
        try! rustCall() {
    uniffi_vodozemac_bindings_fn_constructor_account_new($0
    )
}
    self.init(unsafeFromHandle: handle)
}

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_account(handle, $0) }
    }

    
    /**
     * Create an Account object from a dehydrated device.
     */
public static func fromDehydratedDevice(ciphertext: String, nonce: String, key: Data)throws  -> Account  {
    return try  FfiConverterTypeAccount_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_account_from_dehydrated_device(
        FfiConverterString.lower(ciphertext),
        FfiConverterString.lower(nonce),
        FfiConverterData.lower(key),$0
    )
})
}
    
    /**
     * Create an Account object by unpickling an account pickle in libolm legacy pickle format.
     */
public static func fromLibolmPickle(pickle: String, pickleKey: Data)throws  -> Account  {
    return try  FfiConverterTypeAccount_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_account_from_libolm_pickle(
        FfiConverterString.lower(pickle),
        FfiConverterData.lower(pickleKey),$0
    )
})
}
    
    /**
     * Restore an Account from a previously saved AccountPickle.
     */
public static func fromPickle(pickle: AccountPickle)throws  -> Account  {
    return try  FfiConverterTypeAccount_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_account_from_pickle(
        FfiConverterTypeAccountPickle_lower(pickle),$0
    )
})
}
    

    
    /**
     * Create a Session from the given PreKeyMessage message and identity key
     */
open func createInboundSession(theirIdentityKey: Curve25519PublicKey, preKeyMessage: PreKeyMessage)throws  -> OlmInboundCreationResult  {
    return try  FfiConverterTypeOlmInboundCreationResult_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_method_account_create_inbound_session(self.uniffiCloneHandle(),
        FfiConverterTypeCurve25519PublicKey_lower(theirIdentityKey),
        FfiConverterTypePreKeyMessage_lower(preKeyMessage),$0
    )
})
}
    
    /**
     * Create a Session with the given identity key and one-time key.
     */
open func createOutboundSession(sessionConfig: SessionConfig, identityKey: Curve25519PublicKey, oneTimeKey: Curve25519PublicKey) -> Session  {
    return try!  FfiConverterTypeSession_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_account_create_outbound_session(self.uniffiCloneHandle(),
        FfiConverterTypeSessionConfig_lower(sessionConfig),
        FfiConverterTypeCurve25519PublicKey_lower(identityKey),
        FfiConverterTypeCurve25519PublicKey_lower(oneTimeKey),$0
    )
})
}
    
    /**
     * Get a copy of the account's public Curve25519 key
     */
open func curve25519Key() -> Curve25519PublicKey  {
    return try!  FfiConverterTypeCurve25519PublicKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_account_curve25519_key(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Get a copy of the account's public Ed25519 key
     */
open func ed25519Key() -> Ed25519PublicKey  {
    return try!  FfiConverterTypeEd25519PublicKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_account_ed25519_key(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Get the currently unpublished fallback key.
     * The Account stores at most two private parts of the fallback key.
     */
open func forgetFallbackKey() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_account_forget_fallback_key(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Generate a single new fallback key.
     */
open func generateFallbackKey() -> Curve25519PublicKey?  {
    return try!  FfiConverterOptionTypeCurve25519PublicKey.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_account_generate_fallback_key(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Generates the supplied number of one time keys.
     */
open func generateOneTimeKeys(count: UInt64) -> OneTimeKeyGenerationResult  {
    return try!  FfiConverterTypeOneTimeKeyGenerationResult_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_account_generate_one_time_keys(self.uniffiCloneHandle(),
        FfiConverterUInt64.lower(count),$0
    )
})
}
    
    /**
     * Get the IdentityKeys of this Account
     */
open func identityKeys() -> IdentityKeys  {
    return try!  FfiConverterTypeIdentityKeys_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_account_identity_keys(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Mark all currently unpublished one-time and fallback keys as published.
     */
open func markKeysAsPublished()  {try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_account_mark_keys_as_published(self.uniffiCloneHandle(),$0
    )
}
}
    
    /**
     * Get the maximum number of one-time keys the client should keep on the server.
     */
open func maxNumberOfOneTimeKeys() -> UInt64  {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_account_max_number_of_one_time_keys(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Get the currently unpublished one-time keys.
     */
open func oneTimeKeys() -> [OneTimeKeyPair]  {
    return try!  FfiConverterSequenceTypeOneTimeKeyPair.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_account_one_time_keys(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Convert the account into a struct which implements serde::Serialize and serde::Deserialize.
     */
open func pickle() -> AccountPickle  {
    return try!  FfiConverterTypeAccountPickle_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_account_pickle(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Sign the given message using our Ed25519 identity key.
     */
open func sign(message: Data) -> Ed25519Signature  {
    return try!  FfiConverterTypeEd25519Signature_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_account_sign(self.uniffiCloneHandle(),
        FfiConverterData.lower(message),$0
    )
})
}
    
    /**
     * Get the number of one-time keys we have stored locally.
     */
open func storedOneTimeKeyCount() -> UInt64  {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_account_stored_one_time_key_count(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Create a dehydrated device from the account.
     */
open func toDehydratedDevice(key: Data)throws  -> DehydratedDeviceResult  {
    return try  FfiConverterTypeDehydratedDeviceResult_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_method_account_to_dehydrated_device(self.uniffiCloneHandle(),
        FfiConverterData.lower(key),$0
    )
})
}
    
    /**
     * Pickle an Account into a libolm pickle format.
     */
open func toLibolmPickle(pickleKey: Data)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_method_account_to_libolm_pickle(self.uniffiCloneHandle(),
        FfiConverterData.lower(pickleKey),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAccount: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = Account

    public static func lift(_ handle: UInt64) throws -> Account {
        return Account(unsafeFromHandle: handle)
    }

    public static func lower(_ value: Account) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Account {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: Account, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAccount_lift(_ handle: UInt64) throws -> Account {
    return try FfiConverterTypeAccount.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAccount_lower(_ value: Account) -> UInt64 {
    return FfiConverterTypeAccount.lower(value)
}






/**
 * A struct representing the pickled Account.
 */
public protocol AccountPickleProtocol: AnyObject, Sendable {
    
    /**
     * Serialize and encrypt the pickle using the given key.
     */
    func encrypt(pickleKey: Data) throws  -> String
    
}
/**
 * A struct representing the pickled Account.
 */
open class AccountPickle: AccountPickleProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_accountpickle(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_accountpickle(handle, $0) }
    }

    
    /**
     * Obtain a pickle from a ciphertext by decrypting and deserializing using the given key.
     */
public static func fromEncrypted(ciphertext: String, pickleKey: Data)throws  -> AccountPickle  {
    return try  FfiConverterTypeAccountPickle_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_accountpickle_from_encrypted(
        FfiConverterString.lower(ciphertext),
        FfiConverterData.lower(pickleKey),$0
    )
})
}
    

    
    /**
     * Serialize and encrypt the pickle using the given key.
     */
open func encrypt(pickleKey: Data)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_method_accountpickle_encrypt(self.uniffiCloneHandle(),
        FfiConverterData.lower(pickleKey),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAccountPickle: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = AccountPickle

    public static func lift(_ handle: UInt64) throws -> AccountPickle {
        return AccountPickle(unsafeFromHandle: handle)
    }

    public static func lower(_ value: AccountPickle) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AccountPickle {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: AccountPickle, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAccountPickle_lift(_ handle: UInt64) throws -> AccountPickle {
    return try FfiConverterTypeAccountPickle.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAccountPickle_lower(_ value: AccountPickle) -> UInt64 {
    return FfiConverterTypeAccountPickle.lower(value)
}






/**
 * A check code that can be used to confirm that two EstablishedEcies
 * objects share the same secret. This is supposed to be shared out-of-band to
 * protect against active MITM attacks.
 */
public protocol CheckCodeProtocol: AnyObject, Sendable {
    
    /**
     * Convert the check code to a Vec of two bytes.
     * UniFFI doesn't support fixed arrays, so we return a Vec.
     */
    func asBytes()  -> Data
    
    /**
     * Convert the check code to two base-10 numbers.
     * The number should be displayed with a leading 0 in case the first digit is a 0.
     */
    func toDigit()  -> UInt8
    
}
/**
 * A check code that can be used to confirm that two EstablishedEcies
 * objects share the same secret. This is supposed to be shared out-of-band to
 * protect against active MITM attacks.
 */
open class CheckCode: CheckCodeProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_checkcode(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_checkcode(handle, $0) }
    }

    

    
    /**
     * Convert the check code to a Vec of two bytes.
     * UniFFI doesn't support fixed arrays, so we return a Vec.
     */
open func asBytes() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_checkcode_as_bytes(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Convert the check code to two base-10 numbers.
     * The number should be displayed with a leading 0 in case the first digit is a 0.
     */
open func toDigit() -> UInt8  {
    return try!  FfiConverterUInt8.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_checkcode_to_digit(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCheckCode: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = CheckCode

    public static func lift(_ handle: UInt64) throws -> CheckCode {
        return CheckCode(unsafeFromHandle: handle)
    }

    public static func lower(_ value: CheckCode) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CheckCode {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: CheckCode, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCheckCode_lift(_ handle: UInt64) throws -> CheckCode {
    return try FfiConverterTypeCheckCode.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCheckCode_lower(_ value: CheckCode) -> UInt64 {
    return FfiConverterTypeCheckCode.lower(value)
}






/**
 * Wrapper around vodozemac::Curve25519PublicKey
 *
 * Pattern: Complex object with multiple constructors, error handling, and various return types
 */
public protocol Curve25519PublicKeyProtocol: AnyObject, Sendable {
    
    /**
     * View the public key as bytes
     *
     * Pattern: Method returning Vec<u8> (mapped to Swift Data)
     */
    func asBytes()  -> Data
    
    /**
     * Convert the public key to a base64 string
     *
     * Pattern: Method returning primitive type (String)
     */
    func toBase64()  -> String
    
    /**
     * Convert the public key to bytes
     *
     * Pattern: Method returning Vec<u8> (mapped to Swift Data)
     */
    func toBytes()  -> Data
    
    /**
     * Convert the public key to a vector of bytes
     *
     * Pattern: Method returning Vec<u8> (mapped to Swift Data)
     */
    func toVec()  -> Data
    
}
/**
 * Wrapper around vodozemac::Curve25519PublicKey
 *
 * Pattern: Complex object with multiple constructors, error handling, and various return types
 */
open class Curve25519PublicKey: Curve25519PublicKeyProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_curve25519publickey(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_curve25519publickey(handle, $0) }
    }

    
    /**
     * Create a Curve25519PublicKey from a base64 string
     *
     * Pattern: Fallible constructor with error handling
     */
public static func fromBase64(input: String)throws  -> Curve25519PublicKey  {
    return try  FfiConverterTypeCurve25519PublicKey_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_curve25519publickey_from_base64(
        FfiConverterString.lower(input),$0
    )
})
}
    
    /**
     * Create a Curve25519PublicKey from exactly 32 bytes
     *
     * Pattern: Infallible constructor (panics on invalid input)
     */
public static func fromBytes(bytes: Data) -> Curve25519PublicKey  {
    return try!  FfiConverterTypeCurve25519PublicKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_constructor_curve25519publickey_from_bytes(
        FfiConverterData.lower(bytes),$0
    )
})
}
    
    /**
     * Create a Curve25519PublicKey from a slice of bytes
     *
     * Pattern: Fallible constructor with error handling
     */
public static func fromSlice(bytes: Data)throws  -> Curve25519PublicKey  {
    return try  FfiConverterTypeCurve25519PublicKey_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_curve25519publickey_from_slice(
        FfiConverterData.lower(bytes),$0
    )
})
}
    

    
    /**
     * View the public key as bytes
     *
     * Pattern: Method returning Vec<u8> (mapped to Swift Data)
     */
open func asBytes() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_curve25519publickey_as_bytes(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Convert the public key to a base64 string
     *
     * Pattern: Method returning primitive type (String)
     */
open func toBase64() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_curve25519publickey_to_base64(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Convert the public key to bytes
     *
     * Pattern: Method returning Vec<u8> (mapped to Swift Data)
     */
open func toBytes() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_curve25519publickey_to_bytes(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Convert the public key to a vector of bytes
     *
     * Pattern: Method returning Vec<u8> (mapped to Swift Data)
     */
open func toVec() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_curve25519publickey_to_vec(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCurve25519PublicKey: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = Curve25519PublicKey

    public static func lift(_ handle: UInt64) throws -> Curve25519PublicKey {
        return Curve25519PublicKey(unsafeFromHandle: handle)
    }

    public static func lower(_ value: Curve25519PublicKey) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Curve25519PublicKey {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: Curve25519PublicKey, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCurve25519PublicKey_lift(_ handle: UInt64) throws -> Curve25519PublicKey {
    return try FfiConverterTypeCurve25519PublicKey.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCurve25519PublicKey_lower(_ value: Curve25519PublicKey) -> UInt64 {
    return FfiConverterTypeCurve25519PublicKey.lower(value)
}






/**
 * Wrapper around vodozemac::Curve25519SecretKey
 *
 * Pattern: Object that returns other objects (demonstrates Arc<OtherObject> pattern)
 */
public protocol Curve25519SecretKeyProtocol: AnyObject, Sendable {
    
    /**
     * Get the public key that corresponds to this secret key
     *
     * Pattern: Method returning Arc<AnotherObject> - CRITICAL for UniFFI
     */
    func publicKey()  -> Curve25519PublicKey
    
    /**
     * Convert the secret key to bytes
     *
     * Pattern: Method returning Vec<u8>
     */
    func toBytes()  -> Data
    
}
/**
 * Wrapper around vodozemac::Curve25519SecretKey
 *
 * Pattern: Object that returns other objects (demonstrates Arc<OtherObject> pattern)
 */
open class Curve25519SecretKey: Curve25519SecretKeyProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_curve25519secretkey(self.handle, $0) }
    }
    /**
     * Generate a new random Curve25519SecretKey
     *
     * Pattern: Simple constructor with no parameters
     */
public convenience init() {
    let handle =
        try! rustCall() {
    uniffi_vodozemac_bindings_fn_constructor_curve25519secretkey_new($0
    )
}
    self.init(unsafeFromHandle: handle)
}

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_curve25519secretkey(handle, $0) }
    }

    
    /**
     * Create a Curve25519SecretKey from exactly 32 bytes
     *
     * Pattern: Constructor with validation (panics on invalid input)
     */
public static func fromSlice(bytes: Data) -> Curve25519SecretKey  {
    return try!  FfiConverterTypeCurve25519SecretKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_constructor_curve25519secretkey_from_slice(
        FfiConverterData.lower(bytes),$0
    )
})
}
    

    
    /**
     * Get the public key that corresponds to this secret key
     *
     * Pattern: Method returning Arc<AnotherObject> - CRITICAL for UniFFI
     */
open func publicKey() -> Curve25519PublicKey  {
    return try!  FfiConverterTypeCurve25519PublicKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_curve25519secretkey_public_key(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Convert the secret key to bytes
     *
     * Pattern: Method returning Vec<u8>
     */
open func toBytes() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_curve25519secretkey_to_bytes(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCurve25519SecretKey: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = Curve25519SecretKey

    public static func lift(_ handle: UInt64) throws -> Curve25519SecretKey {
        return Curve25519SecretKey(unsafeFromHandle: handle)
    }

    public static func lower(_ value: Curve25519SecretKey) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Curve25519SecretKey {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: Curve25519SecretKey, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCurve25519SecretKey_lift(_ handle: UInt64) throws -> Curve25519SecretKey {
    return try FfiConverterTypeCurve25519SecretKey.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCurve25519SecretKey_lower(_ value: Curve25519SecretKey) -> UInt64 {
    return FfiConverterTypeCurve25519SecretKey.lower(value)
}






/**
 * A message successfully decrypted by an InboundGroupSession
 *
 * Contains the decrypted plaintext and the message index to prevent replay attacks
 */
public protocol DecryptedMessageProtocol: AnyObject, Sendable {
    
    /**
     * Get the message index used to encrypt this message
     *
     * Each plaintext message should be encrypted with a unique message index per session
     */
    func messageIndex()  -> UInt32
    
    /**
     * Get the decrypted plaintext bytes
     */
    func plaintext()  -> Data
    
}
/**
 * A message successfully decrypted by an InboundGroupSession
 *
 * Contains the decrypted plaintext and the message index to prevent replay attacks
 */
open class DecryptedMessage: DecryptedMessageProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_decryptedmessage(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_decryptedmessage(handle, $0) }
    }

    

    
    /**
     * Get the message index used to encrypt this message
     *
     * Each plaintext message should be encrypted with a unique message index per session
     */
open func messageIndex() -> UInt32  {
    return try!  FfiConverterUInt32.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_decryptedmessage_message_index(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Get the decrypted plaintext bytes
     */
open func plaintext() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_decryptedmessage_plaintext(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDecryptedMessage: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = DecryptedMessage

    public static func lift(_ handle: UInt64) throws -> DecryptedMessage {
        return DecryptedMessage(unsafeFromHandle: handle)
    }

    public static func lower(_ value: DecryptedMessage) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DecryptedMessage {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: DecryptedMessage, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDecryptedMessage_lift(_ handle: UInt64) throws -> DecryptedMessage {
    return try FfiConverterTypeDecryptedMessage.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDecryptedMessage_lower(_ value: DecryptedMessage) -> UInt64 {
    return FfiConverterTypeDecryptedMessage.lower(value)
}






/**
 * An unestablished ECIES session.
 */
public protocol EciesProtocol: AnyObject, Sendable {
    
    /**
     * Create an EstablishedEcies from an InitialMessage encrypted by the other side.
     */
    func establishInboundChannel(message: InitialMessage) throws  -> InboundCreationResult
    
    /**
     * Create an EstablishedEcies session using the other side's Curve25519
     * public key and an initial plaintext.
     */
    func establishOutboundChannel(theirPublicKey: Curve25519PublicKey, initialPlaintext: Data) throws  -> OutboundCreationResult
    
    /**
     * Get our Curve25519PublicKey.
     * This public key needs to be sent to the other side to establish an ECIES channel.
     */
    func publicKey() throws  -> Curve25519PublicKey
    
}
/**
 * An unestablished ECIES session.
 */
open class Ecies: EciesProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_ecies(self.handle, $0) }
    }
    /**
     * Create a new, random, unestablished ECIES session.
     * This method will use the `MATRIX_QR_CODE_LOGIN` info.
     */
public convenience init() {
    let handle =
        try! rustCall() {
    uniffi_vodozemac_bindings_fn_constructor_ecies_new($0
    )
}
    self.init(unsafeFromHandle: handle)
}

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_ecies(handle, $0) }
    }

    
    /**
     * Create a new, random, unestablished ECIES session with the given application info.
     */
public static func withInfo(info: String) -> Ecies  {
    return try!  FfiConverterTypeEcies_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_constructor_ecies_with_info(
        FfiConverterString.lower(info),$0
    )
})
}
    

    
    /**
     * Create an EstablishedEcies from an InitialMessage encrypted by the other side.
     */
open func establishInboundChannel(message: InitialMessage)throws  -> InboundCreationResult  {
    return try  FfiConverterTypeInboundCreationResult_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_method_ecies_establish_inbound_channel(self.uniffiCloneHandle(),
        FfiConverterTypeInitialMessage_lower(message),$0
    )
})
}
    
    /**
     * Create an EstablishedEcies session using the other side's Curve25519
     * public key and an initial plaintext.
     */
open func establishOutboundChannel(theirPublicKey: Curve25519PublicKey, initialPlaintext: Data)throws  -> OutboundCreationResult  {
    return try  FfiConverterTypeOutboundCreationResult_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_method_ecies_establish_outbound_channel(self.uniffiCloneHandle(),
        FfiConverterTypeCurve25519PublicKey_lower(theirPublicKey),
        FfiConverterData.lower(initialPlaintext),$0
    )
})
}
    
    /**
     * Get our Curve25519PublicKey.
     * This public key needs to be sent to the other side to establish an ECIES channel.
     */
open func publicKey()throws  -> Curve25519PublicKey  {
    return try  FfiConverterTypeCurve25519PublicKey_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_method_ecies_public_key(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEcies: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = Ecies

    public static func lift(_ handle: UInt64) throws -> Ecies {
        return Ecies(unsafeFromHandle: handle)
    }

    public static func lower(_ value: Ecies) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ecies {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: Ecies, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEcies_lift(_ handle: UInt64) throws -> Ecies {
    return try FfiConverterTypeEcies.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEcies_lower(_ value: Ecies) -> UInt64 {
    return FfiConverterTypeEcies.lower(value)
}






/**
 * Wrapper around vodozemac::Ed25519Keypair
 *
 * Ed25519 keypair containing both public and secret keys for digital signatures
 */
public protocol Ed25519KeypairProtocol: AnyObject, Sendable {
    
    /**
     * Get the public key from this keypair
     *
     * Pattern: Method returning Arc<AnotherObject>
     */
    func publicKey()  -> Ed25519PublicKey
    
    /**
     * Sign a message with the secret key from this keypair
     *
     * Pattern: Method taking bytes and returning Arc<AnotherObject>
     */
    func sign(message: Data)  -> Ed25519Signature
    
}
/**
 * Wrapper around vodozemac::Ed25519Keypair
 *
 * Ed25519 keypair containing both public and secret keys for digital signatures
 */
open class Ed25519Keypair: Ed25519KeypairProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_ed25519keypair(self.handle, $0) }
    }
    /**
     * Generate a new random Ed25519 keypair
     *
     * Pattern: Simple constructor with no parameters
     */
public convenience init() {
    let handle =
        try! rustCall() {
    uniffi_vodozemac_bindings_fn_constructor_ed25519keypair_new($0
    )
}
    self.init(unsafeFromHandle: handle)
}

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_ed25519keypair(handle, $0) }
    }

    

    
    /**
     * Get the public key from this keypair
     *
     * Pattern: Method returning Arc<AnotherObject>
     */
open func publicKey() -> Ed25519PublicKey  {
    return try!  FfiConverterTypeEd25519PublicKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_ed25519keypair_public_key(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Sign a message with the secret key from this keypair
     *
     * Pattern: Method taking bytes and returning Arc<AnotherObject>
     */
open func sign(message: Data) -> Ed25519Signature  {
    return try!  FfiConverterTypeEd25519Signature_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_ed25519keypair_sign(self.uniffiCloneHandle(),
        FfiConverterData.lower(message),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEd25519Keypair: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = Ed25519Keypair

    public static func lift(_ handle: UInt64) throws -> Ed25519Keypair {
        return Ed25519Keypair(unsafeFromHandle: handle)
    }

    public static func lower(_ value: Ed25519Keypair) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ed25519Keypair {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: Ed25519Keypair, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEd25519Keypair_lift(_ handle: UInt64) throws -> Ed25519Keypair {
    return try FfiConverterTypeEd25519Keypair.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEd25519Keypair_lower(_ value: Ed25519Keypair) -> UInt64 {
    return FfiConverterTypeEd25519Keypair.lower(value)
}






/**
 * Wrapper around vodozemac::Ed25519PublicKey
 *
 * Ed25519 public key used to verify digital signatures
 */
public protocol Ed25519PublicKeyProtocol: AnyObject, Sendable {
    
    /**
     * View this public key as a byte array
     *
     * Pattern: Method returning Vec<u8>
     */
    func asBytes()  -> Data
    
    /**
     * Convert the public key to a base64 string
     *
     * Pattern: Method returning primitive type (String)
     */
    func toBase64()  -> String
    
    /**
     * Verify that the provided signature for a message was signed by this key
     *
     * Pattern: Method with complex parameters, returns Result
     */
    func verify(message: Data, signature: Ed25519Signature) throws 
    
}
/**
 * Wrapper around vodozemac::Ed25519PublicKey
 *
 * Ed25519 public key used to verify digital signatures
 */
open class Ed25519PublicKey: Ed25519PublicKeyProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_ed25519publickey(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_ed25519publickey(handle, $0) }
    }

    
    /**
     * Create an Ed25519PublicKey from a base64 string
     *
     * Pattern: Fallible constructor with error handling
     */
public static func fromBase64(input: String)throws  -> Ed25519PublicKey  {
    return try  FfiConverterTypeEd25519PublicKey_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_ed25519publickey_from_base64(
        FfiConverterString.lower(input),$0
    )
})
}
    
    /**
     * Create an Ed25519PublicKey from a slice of bytes
     *
     * Pattern: Fallible constructor with error handling
     */
public static func fromSlice(bytes: Data)throws  -> Ed25519PublicKey  {
    return try  FfiConverterTypeEd25519PublicKey_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_ed25519publickey_from_slice(
        FfiConverterData.lower(bytes),$0
    )
})
}
    

    
    /**
     * View this public key as a byte array
     *
     * Pattern: Method returning Vec<u8>
     */
open func asBytes() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_ed25519publickey_as_bytes(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Convert the public key to a base64 string
     *
     * Pattern: Method returning primitive type (String)
     */
open func toBase64() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_ed25519publickey_to_base64(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Verify that the provided signature for a message was signed by this key
     *
     * Pattern: Method with complex parameters, returns Result
     */
open func verify(message: Data, signature: Ed25519Signature)throws   {try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_method_ed25519publickey_verify(self.uniffiCloneHandle(),
        FfiConverterData.lower(message),
        FfiConverterTypeEd25519Signature_lower(signature),$0
    )
}
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEd25519PublicKey: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = Ed25519PublicKey

    public static func lift(_ handle: UInt64) throws -> Ed25519PublicKey {
        return Ed25519PublicKey(unsafeFromHandle: handle)
    }

    public static func lower(_ value: Ed25519PublicKey) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ed25519PublicKey {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: Ed25519PublicKey, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEd25519PublicKey_lift(_ handle: UInt64) throws -> Ed25519PublicKey {
    return try FfiConverterTypeEd25519PublicKey.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEd25519PublicKey_lower(_ value: Ed25519PublicKey) -> UInt64 {
    return FfiConverterTypeEd25519PublicKey.lower(value)
}






/**
 * Wrapper around vodozemac::Ed25519SecretKey
 *
 * Ed25519 secret key used to create digital signatures
 */
public protocol Ed25519SecretKeyProtocol: AnyObject, Sendable {
    
    /**
     * Get the public key that matches this secret key
     *
     * Pattern: Method returning Arc<AnotherObject>
     */
    func publicKey()  -> Ed25519PublicKey
    
    /**
     * Sign the given slice of bytes with this secret key
     *
     * Pattern: Method taking bytes and returning Arc<AnotherObject>
     */
    func sign(message: Data)  -> Ed25519Signature
    
    /**
     * Convert the secret key to a base64 encoded string
     *
     * Pattern: Method returning primitive type (String)
     */
    func toBase64()  -> String
    
    /**
     * Get the byte representation of the secret key
     *
     * Pattern: Method returning Vec<u8> (Box<[u8; 32]> is converted to Vec<u8>)
     */
    func toBytes()  -> Data
    
}
/**
 * Wrapper around vodozemac::Ed25519SecretKey
 *
 * Ed25519 secret key used to create digital signatures
 */
open class Ed25519SecretKey: Ed25519SecretKeyProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_ed25519secretkey(self.handle, $0) }
    }
    /**
     * Generate a new random Ed25519 secret key
     *
     * Pattern: Simple constructor with no parameters
     */
public convenience init() {
    let handle =
        try! rustCall() {
    uniffi_vodozemac_bindings_fn_constructor_ed25519secretkey_new($0
    )
}
    self.init(unsafeFromHandle: handle)
}

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_ed25519secretkey(handle, $0) }
    }

    
    /**
     * Create an Ed25519SecretKey from a base64 string
     *
     * Pattern: Fallible constructor with error handling
     */
public static func fromBase64(input: String)throws  -> Ed25519SecretKey  {
    return try  FfiConverterTypeEd25519SecretKey_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_ed25519secretkey_from_base64(
        FfiConverterString.lower(input),$0
    )
})
}
    
    /**
     * Create an Ed25519SecretKey from a slice of bytes
     *
     * Pattern: Constructor with validation
     */
public static func fromSlice(bytes: Data)throws  -> Ed25519SecretKey  {
    return try  FfiConverterTypeEd25519SecretKey_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_ed25519secretkey_from_slice(
        FfiConverterData.lower(bytes),$0
    )
})
}
    

    
    /**
     * Get the public key that matches this secret key
     *
     * Pattern: Method returning Arc<AnotherObject>
     */
open func publicKey() -> Ed25519PublicKey  {
    return try!  FfiConverterTypeEd25519PublicKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_ed25519secretkey_public_key(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Sign the given slice of bytes with this secret key
     *
     * Pattern: Method taking bytes and returning Arc<AnotherObject>
     */
open func sign(message: Data) -> Ed25519Signature  {
    return try!  FfiConverterTypeEd25519Signature_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_ed25519secretkey_sign(self.uniffiCloneHandle(),
        FfiConverterData.lower(message),$0
    )
})
}
    
    /**
     * Convert the secret key to a base64 encoded string
     *
     * Pattern: Method returning primitive type (String)
     */
open func toBase64() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_ed25519secretkey_to_base64(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Get the byte representation of the secret key
     *
     * Pattern: Method returning Vec<u8> (Box<[u8; 32]> is converted to Vec<u8>)
     */
open func toBytes() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_ed25519secretkey_to_bytes(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEd25519SecretKey: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = Ed25519SecretKey

    public static func lift(_ handle: UInt64) throws -> Ed25519SecretKey {
        return Ed25519SecretKey(unsafeFromHandle: handle)
    }

    public static func lower(_ value: Ed25519SecretKey) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ed25519SecretKey {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: Ed25519SecretKey, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEd25519SecretKey_lift(_ handle: UInt64) throws -> Ed25519SecretKey {
    return try FfiConverterTypeEd25519SecretKey.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEd25519SecretKey_lower(_ value: Ed25519SecretKey) -> UInt64 {
    return FfiConverterTypeEd25519SecretKey.lower(value)
}






/**
 * Wrapper around vodozemac::Ed25519Signature
 *
 * Ed25519 digital signature that can be used to verify message authenticity
 */
public protocol Ed25519SignatureProtocol: AnyObject, Sendable {
    
    /**
     * Convert the signature to a base64 encoded string
     *
     * Pattern: Method returning primitive type (String)
     */
    func toBase64()  -> String
    
    /**
     * Convert the signature to a byte array
     *
     * Pattern: Method returning Vec<u8>
     */
    func toBytes()  -> Data
    
}
/**
 * Wrapper around vodozemac::Ed25519Signature
 *
 * Ed25519 digital signature that can be used to verify message authenticity
 */
open class Ed25519Signature: Ed25519SignatureProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_ed25519signature(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_ed25519signature(handle, $0) }
    }

    
    /**
     * Create an Ed25519Signature from a base64 string
     *
     * Pattern: Fallible constructor with error handling
     */
public static func fromBase64(input: String)throws  -> Ed25519Signature  {
    return try  FfiConverterTypeEd25519Signature_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_ed25519signature_from_base64(
        FfiConverterString.lower(input),$0
    )
})
}
    
    /**
     * Create an Ed25519Signature from a slice of bytes
     *
     * Pattern: Fallible constructor with error handling
     */
public static func fromSlice(bytes: Data)throws  -> Ed25519Signature  {
    return try  FfiConverterTypeEd25519Signature_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_ed25519signature_from_slice(
        FfiConverterData.lower(bytes),$0
    )
})
}
    

    
    /**
     * Convert the signature to a base64 encoded string
     *
     * Pattern: Method returning primitive type (String)
     */
open func toBase64() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_ed25519signature_to_base64(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Convert the signature to a byte array
     *
     * Pattern: Method returning Vec<u8>
     */
open func toBytes() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_ed25519signature_to_bytes(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEd25519Signature: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = Ed25519Signature

    public static func lift(_ handle: UInt64) throws -> Ed25519Signature {
        return Ed25519Signature(unsafeFromHandle: handle)
    }

    public static func lower(_ value: Ed25519Signature) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ed25519Signature {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: Ed25519Signature, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEd25519Signature_lift(_ handle: UInt64) throws -> Ed25519Signature {
    return try FfiConverterTypeEd25519Signature.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEd25519Signature_lower(_ value: Ed25519Signature) -> UInt64 {
    return FfiConverterTypeEd25519Signature.lower(value)
}






/**
 * An established ECIES session.
 * This session can be used to encrypt and decrypt messages between the two
 * sides of the channel.
 */
public protocol EstablishedEciesProtocol: AnyObject, Sendable {
    
    /**
     * Get the CheckCode which uniquely identifies this EstablishedEcies session.
     * This check code can be used to check that both sides of the session are
     * indeed using the same shared secret.
     */
    func checkCode()  -> CheckCode
    
    /**
     * Decrypt the given message using this EstablishedEcies session.
     */
    func decrypt(message: Message) throws  -> Data
    
    /**
     * Encrypt the given plaintext using this EstablishedEcies session.
     */
    func encrypt(plaintext: Data) throws  -> Message
    
    /**
     * Get our Curve25519PublicKey.
     * This public key needs to be sent to the other side so that it can
     * complete the ECIES channel establishment.
     */
    func publicKey()  -> Curve25519PublicKey
    
}
/**
 * An established ECIES session.
 * This session can be used to encrypt and decrypt messages between the two
 * sides of the channel.
 */
open class EstablishedEcies: EstablishedEciesProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_establishedecies(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_establishedecies(handle, $0) }
    }

    

    
    /**
     * Get the CheckCode which uniquely identifies this EstablishedEcies session.
     * This check code can be used to check that both sides of the session are
     * indeed using the same shared secret.
     */
open func checkCode() -> CheckCode  {
    return try!  FfiConverterTypeCheckCode_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_establishedecies_check_code(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Decrypt the given message using this EstablishedEcies session.
     */
open func decrypt(message: Message)throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_method_establishedecies_decrypt(self.uniffiCloneHandle(),
        FfiConverterTypeMessage_lower(message),$0
    )
})
}
    
    /**
     * Encrypt the given plaintext using this EstablishedEcies session.
     */
open func encrypt(plaintext: Data)throws  -> Message  {
    return try  FfiConverterTypeMessage_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_method_establishedecies_encrypt(self.uniffiCloneHandle(),
        FfiConverterData.lower(plaintext),$0
    )
})
}
    
    /**
     * Get our Curve25519PublicKey.
     * This public key needs to be sent to the other side so that it can
     * complete the ECIES channel establishment.
     */
open func publicKey() -> Curve25519PublicKey  {
    return try!  FfiConverterTypeCurve25519PublicKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_establishedecies_public_key(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEstablishedEcies: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = EstablishedEcies

    public static func lift(_ handle: UInt64) throws -> EstablishedEcies {
        return EstablishedEcies(unsafeFromHandle: handle)
    }

    public static func lower(_ value: EstablishedEcies) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EstablishedEcies {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: EstablishedEcies, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEstablishedEcies_lift(_ handle: UInt64) throws -> EstablishedEcies {
    return try FfiConverterTypeEstablishedEcies.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEstablishedEcies_lower(_ value: EstablishedEcies) -> UInt64 {
    return FfiConverterTypeEstablishedEcies.lower(value)
}






/**
 * A struct representing a short auth string verification object where the
 * shared secret has been established.
 */
public protocol EstablishedSasProtocol: AnyObject, Sendable {
    
    /**
     * Generate SasBytes using HKDF with the shared secret as the input key material.
     *
     * The info string should be agreed upon beforehand, both parties need to
     * use the same info string.
     */
    func bytes(info: String)  -> SasBytes
    
    /**
     * Generate the given number of bytes using HKDF with the shared secret
     * as the input key material.
     *
     * The info string should be agreed upon beforehand, both parties need to
     * use the same info string.
     *
     * The number of bytes we can generate is limited, we can generate up to
     * 32 * 255 bytes. This function will return an error if the given count is
     * larger than the limit.
     */
    func bytesRaw(info: String, count: UInt32) throws  -> Data
    
    /**
     * Calculate a MAC for the given input using the info string as additional data.
     *
     * This should be used to calculate a MAC of the ed25519 identity key of an Account.
     * The MAC is returned as a base64 encoded string.
     */
    func calculateMac(input: String, info: String)  -> Mac
    
    /**
     * Calculate a MAC for the given input using the info string as additional
     * data, the MAC is returned as an invalid base64 encoded string.
     *
     * **Warning**: This method should never be used unless you require libolm
     * compatibility. Libolm used to incorrectly encode their MAC because the
     * input buffer was reused as the output buffer.
     */
    func calculateMacInvalidBase64(input: String, info: String)  -> String
    
    /**
     * Get the public key that was created by us, that was used to establish
     * the shared secret.
     */
    func ourPublicKey()  -> Curve25519PublicKey
    
    /**
     * Get the public key that was created by the other party, that was used to
     * establish the shared secret.
     */
    func theirPublicKey()  -> Curve25519PublicKey
    
    /**
     * Verify a MAC that was previously created using the calculate_mac method.
     *
     * Users should calculate a MAC and send it to the other side, they should
     * then verify each other's MAC using this method.
     */
    func verifyMac(input: String, info: String, tag: Mac) throws 
    
}
/**
 * A struct representing a short auth string verification object where the
 * shared secret has been established.
 */
open class EstablishedSas: EstablishedSasProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_establishedsas(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_establishedsas(handle, $0) }
    }

    

    
    /**
     * Generate SasBytes using HKDF with the shared secret as the input key material.
     *
     * The info string should be agreed upon beforehand, both parties need to
     * use the same info string.
     */
open func bytes(info: String) -> SasBytes  {
    return try!  FfiConverterTypeSasBytes_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_establishedsas_bytes(self.uniffiCloneHandle(),
        FfiConverterString.lower(info),$0
    )
})
}
    
    /**
     * Generate the given number of bytes using HKDF with the shared secret
     * as the input key material.
     *
     * The info string should be agreed upon beforehand, both parties need to
     * use the same info string.
     *
     * The number of bytes we can generate is limited, we can generate up to
     * 32 * 255 bytes. This function will return an error if the given count is
     * larger than the limit.
     */
open func bytesRaw(info: String, count: UInt32)throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_method_establishedsas_bytes_raw(self.uniffiCloneHandle(),
        FfiConverterString.lower(info),
        FfiConverterUInt32.lower(count),$0
    )
})
}
    
    /**
     * Calculate a MAC for the given input using the info string as additional data.
     *
     * This should be used to calculate a MAC of the ed25519 identity key of an Account.
     * The MAC is returned as a base64 encoded string.
     */
open func calculateMac(input: String, info: String) -> Mac  {
    return try!  FfiConverterTypeMac_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_establishedsas_calculate_mac(self.uniffiCloneHandle(),
        FfiConverterString.lower(input),
        FfiConverterString.lower(info),$0
    )
})
}
    
    /**
     * Calculate a MAC for the given input using the info string as additional
     * data, the MAC is returned as an invalid base64 encoded string.
     *
     * **Warning**: This method should never be used unless you require libolm
     * compatibility. Libolm used to incorrectly encode their MAC because the
     * input buffer was reused as the output buffer.
     */
open func calculateMacInvalidBase64(input: String, info: String) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_establishedsas_calculate_mac_invalid_base64(self.uniffiCloneHandle(),
        FfiConverterString.lower(input),
        FfiConverterString.lower(info),$0
    )
})
}
    
    /**
     * Get the public key that was created by us, that was used to establish
     * the shared secret.
     */
open func ourPublicKey() -> Curve25519PublicKey  {
    return try!  FfiConverterTypeCurve25519PublicKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_establishedsas_our_public_key(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Get the public key that was created by the other party, that was used to
     * establish the shared secret.
     */
open func theirPublicKey() -> Curve25519PublicKey  {
    return try!  FfiConverterTypeCurve25519PublicKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_establishedsas_their_public_key(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Verify a MAC that was previously created using the calculate_mac method.
     *
     * Users should calculate a MAC and send it to the other side, they should
     * then verify each other's MAC using this method.
     */
open func verifyMac(input: String, info: String, tag: Mac)throws   {try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_method_establishedsas_verify_mac(self.uniffiCloneHandle(),
        FfiConverterString.lower(input),
        FfiConverterString.lower(info),
        FfiConverterTypeMac_lower(tag),$0
    )
}
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEstablishedSas: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = EstablishedSas

    public static func lift(_ handle: UInt64) throws -> EstablishedSas {
        return EstablishedSas(unsafeFromHandle: handle)
    }

    public static func lower(_ value: EstablishedSas) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EstablishedSas {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: EstablishedSas, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEstablishedSas_lift(_ handle: UInt64) throws -> EstablishedSas {
    return try FfiConverterTypeEstablishedSas.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEstablishedSas_lower(_ value: EstablishedSas) -> UInt64 {
    return FfiConverterTypeEstablishedSas.lower(value)
}






/**
 * An exported session key that can be used to create an InboundGroupSession
 *
 * This is used to share session keys between clients for group messaging
 */
public protocol ExportedSessionKeyProtocol: AnyObject, Sendable {
    
    /**
     * Convert the exported session key to a base64 string
     */
    func toBase64()  -> String
    
    /**
     * Convert the exported session key to bytes
     */
    func toBytes()  -> Data
    
}
/**
 * An exported session key that can be used to create an InboundGroupSession
 *
 * This is used to share session keys between clients for group messaging
 */
open class ExportedSessionKey: ExportedSessionKeyProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_exportedsessionkey(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_exportedsessionkey(handle, $0) }
    }

    
    /**
     * Create an ExportedSessionKey from a base64 string
     */
public static func fromBase64(input: String)throws  -> ExportedSessionKey  {
    return try  FfiConverterTypeExportedSessionKey_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_exportedsessionkey_from_base64(
        FfiConverterString.lower(input),$0
    )
})
}
    
    /**
     * Create an ExportedSessionKey from bytes
     */
public static func fromBytes(bytes: Data)throws  -> ExportedSessionKey  {
    return try  FfiConverterTypeExportedSessionKey_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_exportedsessionkey_from_bytes(
        FfiConverterData.lower(bytes),$0
    )
})
}
    

    
    /**
     * Convert the exported session key to a base64 string
     */
open func toBase64() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_exportedsessionkey_to_base64(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Convert the exported session key to bytes
     */
open func toBytes() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_exportedsessionkey_to_bytes(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeExportedSessionKey: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = ExportedSessionKey

    public static func lift(_ handle: UInt64) throws -> ExportedSessionKey {
        return ExportedSessionKey(unsafeFromHandle: handle)
    }

    public static func lower(_ value: ExportedSessionKey) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ExportedSessionKey {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: ExportedSessionKey, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeExportedSessionKey_lift(_ handle: UInt64) throws -> ExportedSessionKey {
    return try FfiConverterTypeExportedSessionKey.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeExportedSessionKey_lower(_ value: ExportedSessionKey) -> UInt64 {
    return FfiConverterTypeExportedSessionKey.lower(value)
}






/**
 * A Megolm group session for sending encrypted messages
 *
 * Represents a single sending participant in an encrypted group communication context
 */
public protocol GroupSessionProtocol: AnyObject, Sendable {
    
    /**
     * Encrypt a plaintext message
     */
    func encrypt(plaintext: Data)  -> MegolmMessage
    
    /**
     * Get the current message index
     */
    func messageIndex()  -> UInt32
    
    /**
     * Create a pickle from this group session
     */
    func pickle()  -> GroupSessionPickle
    
    /**
     * Get the session ID
     */
    func sessionId()  -> String
    
    /**
     * Get the session key that can be shared with other participants
     */
    func sessionKey()  -> SessionKey
    
}
/**
 * A Megolm group session for sending encrypted messages
 *
 * Represents a single sending participant in an encrypted group communication context
 */
open class GroupSession: GroupSessionProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_groupsession(self.handle, $0) }
    }
    /**
     * Create a new group session with the default configuration (Version 2)
     */
public convenience init() {
    let handle =
        try! rustCall() {
    uniffi_vodozemac_bindings_fn_constructor_groupsession_new($0
    )
}
    self.init(unsafeFromHandle: handle)
}

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_groupsession(handle, $0) }
    }

    
    /**
     * Create a group session from a pickle
     */
public static func fromPickle(pickle: GroupSessionPickle)throws  -> GroupSession  {
    return try  FfiConverterTypeGroupSession_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_groupsession_from_pickle(
        FfiConverterTypeGroupSessionPickle_lower(pickle),$0
    )
})
}
    
    /**
     * Create a new group session with a specific configuration
     */
public static func withConfig(config: MegolmSessionConfig) -> GroupSession  {
    return try!  FfiConverterTypeGroupSession_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_constructor_groupsession_with_config(
        FfiConverterTypeMegolmSessionConfig_lower(config),$0
    )
})
}
    

    
    /**
     * Encrypt a plaintext message
     */
open func encrypt(plaintext: Data) -> MegolmMessage  {
    return try!  FfiConverterTypeMegolmMessage_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_groupsession_encrypt(self.uniffiCloneHandle(),
        FfiConverterData.lower(plaintext),$0
    )
})
}
    
    /**
     * Get the current message index
     */
open func messageIndex() -> UInt32  {
    return try!  FfiConverterUInt32.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_groupsession_message_index(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Create a pickle from this group session
     */
open func pickle() -> GroupSessionPickle  {
    return try!  FfiConverterTypeGroupSessionPickle_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_groupsession_pickle(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Get the session ID
     */
open func sessionId() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_groupsession_session_id(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Get the session key that can be shared with other participants
     */
open func sessionKey() -> SessionKey  {
    return try!  FfiConverterTypeSessionKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_groupsession_session_key(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGroupSession: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = GroupSession

    public static func lift(_ handle: UInt64) throws -> GroupSession {
        return GroupSession(unsafeFromHandle: handle)
    }

    public static func lower(_ value: GroupSession) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GroupSession {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: GroupSession, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGroupSession_lift(_ handle: UInt64) throws -> GroupSession {
    return try FfiConverterTypeGroupSession.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGroupSession_lower(_ value: GroupSession) -> UInt64 {
    return FfiConverterTypeGroupSession.lower(value)
}






/**
 * A pickled group session that can be stored and later restored
 */
public protocol GroupSessionPickleProtocol: AnyObject, Sendable {
    
    /**
     * Create an encrypted pickle from this group session pickle
     *
     * Note: This consumes the pickle as the encryption method takes ownership
     */
    func encrypt(pickleKey: Data) throws  -> String
    
}
/**
 * A pickled group session that can be stored and later restored
 */
open class GroupSessionPickle: GroupSessionPickleProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_groupsessionpickle(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_groupsessionpickle(handle, $0) }
    }

    
    /**
     * Create a group session pickle by decrypting an encrypted pickle
     */
public static func fromEncrypted(ciphertext: String, pickleKey: Data)throws  -> GroupSessionPickle  {
    return try  FfiConverterTypeGroupSessionPickle_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_groupsessionpickle_from_encrypted(
        FfiConverterString.lower(ciphertext),
        FfiConverterData.lower(pickleKey),$0
    )
})
}
    

    
    /**
     * Create an encrypted pickle from this group session pickle
     *
     * Note: This consumes the pickle as the encryption method takes ownership
     */
open func encrypt(pickleKey: Data)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_method_groupsessionpickle_encrypt(self.uniffiCloneHandle(),
        FfiConverterData.lower(pickleKey),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGroupSessionPickle: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = GroupSessionPickle

    public static func lift(_ handle: UInt64) throws -> GroupSessionPickle {
        return GroupSessionPickle(unsafeFromHandle: handle)
    }

    public static func lower(_ value: GroupSessionPickle) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GroupSessionPickle {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: GroupSessionPickle, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGroupSessionPickle_lift(_ handle: UInt64) throws -> GroupSessionPickle {
    return try FfiConverterTypeGroupSessionPickle.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGroupSessionPickle_lower(_ value: GroupSessionPickle) -> UInt64 {
    return FfiConverterTypeGroupSessionPickle.lower(value)
}






/**
 * The two main identity keys of an Account.
 */
public protocol IdentityKeysProtocol: AnyObject, Sendable {
    
    /**
     * The Curve25519 identity key, used for Diffie-Hellman operations.
     */
    func curve25519()  -> Curve25519PublicKey
    
    /**
     * The Ed25519 identity key, used for signing.
     */
    func ed25519()  -> Ed25519PublicKey
    
}
/**
 * The two main identity keys of an Account.
 */
open class IdentityKeys: IdentityKeysProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_identitykeys(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_identitykeys(handle, $0) }
    }

    

    
    /**
     * The Curve25519 identity key, used for Diffie-Hellman operations.
     */
open func curve25519() -> Curve25519PublicKey  {
    return try!  FfiConverterTypeCurve25519PublicKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_identitykeys_curve25519(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * The Ed25519 identity key, used for signing.
     */
open func ed25519() -> Ed25519PublicKey  {
    return try!  FfiConverterTypeEd25519PublicKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_identitykeys_ed25519(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeIdentityKeys: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = IdentityKeys

    public static func lift(_ handle: UInt64) throws -> IdentityKeys {
        return IdentityKeys(unsafeFromHandle: handle)
    }

    public static func lower(_ value: IdentityKeys) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IdentityKeys {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: IdentityKeys, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIdentityKeys_lift(_ handle: UInt64) throws -> IdentityKeys {
    return try FfiConverterTypeIdentityKeys.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIdentityKeys_lower(_ value: IdentityKeys) -> UInt64 {
    return FfiConverterTypeIdentityKeys.lower(value)
}






/**
 * The result of an inbound ECIES channel establishment.
 */
public protocol InboundCreationResultProtocol: AnyObject, Sendable {
    
    /**
     * Get the established ECIES channel.
     */
    func ecies()  -> EstablishedEcies
    
    /**
     * Get the plaintext of the initial message.
     */
    func message()  -> Data
    
}
/**
 * The result of an inbound ECIES channel establishment.
 */
open class InboundCreationResult: InboundCreationResultProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_inboundcreationresult(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_inboundcreationresult(handle, $0) }
    }

    

    
    /**
     * Get the established ECIES channel.
     */
open func ecies() -> EstablishedEcies  {
    return try!  FfiConverterTypeEstablishedEcies_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_inboundcreationresult_ecies(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Get the plaintext of the initial message.
     */
open func message() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_inboundcreationresult_message(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeInboundCreationResult: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = InboundCreationResult

    public static func lift(_ handle: UInt64) throws -> InboundCreationResult {
        return InboundCreationResult(unsafeFromHandle: handle)
    }

    public static func lower(_ value: InboundCreationResult) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InboundCreationResult {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: InboundCreationResult, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeInboundCreationResult_lift(_ handle: UInt64) throws -> InboundCreationResult {
    return try FfiConverterTypeInboundCreationResult.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeInboundCreationResult_lower(_ value: InboundCreationResult) -> UInt64 {
    return FfiConverterTypeInboundCreationResult.lower(value)
}






/**
 * A Megolm inbound group session for receiving encrypted messages
 *
 * Represents a single receiving participant in an encrypted group communication
 */
public protocol InboundGroupSessionProtocol: AnyObject, Sendable {
    
    /**
     * Compare sessions to determine their relative position in the ratchet
     */
    func compare(other: InboundGroupSession)  -> SessionOrdering
    
    /**
     * Decrypt a megolm message
     */
    func decrypt(message: MegolmMessage) throws  -> DecryptedMessage
    
    /**
     * Export the session at a specific message index
     */
    func exportAt(messageIndex: UInt32)  -> ExportedSessionKey?
    
    /**
     * Get the first known message index
     */
    func firstKnownIndex()  -> UInt32
    
    /**
     * Create a pickle from this inbound group session
     */
    func pickle()  -> InboundGroupSessionPickle
    
    /**
     * Get the session ID
     */
    func sessionId()  -> String
    
}
/**
 * A Megolm inbound group session for receiving encrypted messages
 *
 * Represents a single receiving participant in an encrypted group communication
 */
open class InboundGroupSession: InboundGroupSessionProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_inboundgroupsession(self.handle, $0) }
    }
    /**
     * Create an inbound group session from a session key
     */
public convenience init(sessionKey: SessionKey, config: MegolmSessionConfig) {
    let handle =
        try! rustCall() {
    uniffi_vodozemac_bindings_fn_constructor_inboundgroupsession_new(
        FfiConverterTypeSessionKey_lower(sessionKey),
        FfiConverterTypeMegolmSessionConfig_lower(config),$0
    )
}
    self.init(unsafeFromHandle: handle)
}

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_inboundgroupsession(handle, $0) }
    }

    
    /**
     * Create an inbound group session from a pickle
     */
public static func fromPickle(pickle: InboundGroupSessionPickle)throws  -> InboundGroupSession  {
    return try  FfiConverterTypeInboundGroupSession_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_inboundgroupsession_from_pickle(
        FfiConverterTypeInboundGroupSessionPickle_lower(pickle),$0
    )
})
}
    
    /**
     * Import an inbound group session from an exported session key
     */
public static func `import`(exportedKey: ExportedSessionKey, config: MegolmSessionConfig) -> InboundGroupSession  {
    return try!  FfiConverterTypeInboundGroupSession_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_constructor_inboundgroupsession_import(
        FfiConverterTypeExportedSessionKey_lower(exportedKey),
        FfiConverterTypeMegolmSessionConfig_lower(config),$0
    )
})
}
    

    
    /**
     * Compare sessions to determine their relative position in the ratchet
     */
open func compare(other: InboundGroupSession) -> SessionOrdering  {
    return try!  FfiConverterTypeSessionOrdering_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_inboundgroupsession_compare(self.uniffiCloneHandle(),
        FfiConverterTypeInboundGroupSession_lower(other),$0
    )
})
}
    
    /**
     * Decrypt a megolm message
     */
open func decrypt(message: MegolmMessage)throws  -> DecryptedMessage  {
    return try  FfiConverterTypeDecryptedMessage_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_method_inboundgroupsession_decrypt(self.uniffiCloneHandle(),
        FfiConverterTypeMegolmMessage_lower(message),$0
    )
})
}
    
    /**
     * Export the session at a specific message index
     */
open func exportAt(messageIndex: UInt32) -> ExportedSessionKey?  {
    return try!  FfiConverterOptionTypeExportedSessionKey.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_inboundgroupsession_export_at(self.uniffiCloneHandle(),
        FfiConverterUInt32.lower(messageIndex),$0
    )
})
}
    
    /**
     * Get the first known message index
     */
open func firstKnownIndex() -> UInt32  {
    return try!  FfiConverterUInt32.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_inboundgroupsession_first_known_index(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Create a pickle from this inbound group session
     */
open func pickle() -> InboundGroupSessionPickle  {
    return try!  FfiConverterTypeInboundGroupSessionPickle_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_inboundgroupsession_pickle(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Get the session ID
     */
open func sessionId() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_inboundgroupsession_session_id(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeInboundGroupSession: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = InboundGroupSession

    public static func lift(_ handle: UInt64) throws -> InboundGroupSession {
        return InboundGroupSession(unsafeFromHandle: handle)
    }

    public static func lower(_ value: InboundGroupSession) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InboundGroupSession {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: InboundGroupSession, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeInboundGroupSession_lift(_ handle: UInt64) throws -> InboundGroupSession {
    return try FfiConverterTypeInboundGroupSession.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeInboundGroupSession_lower(_ value: InboundGroupSession) -> UInt64 {
    return FfiConverterTypeInboundGroupSession.lower(value)
}






/**
 * A pickled inbound group session that can be stored and later restored
 */
public protocol InboundGroupSessionPickleProtocol: AnyObject, Sendable {
    
    /**
     * Create an encrypted pickle from this inbound group session pickle
     *
     * Note: This consumes the pickle as the encryption method takes ownership
     */
    func encrypt(pickleKey: Data) throws  -> String
    
}
/**
 * A pickled inbound group session that can be stored and later restored
 */
open class InboundGroupSessionPickle: InboundGroupSessionPickleProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_inboundgroupsessionpickle(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_inboundgroupsessionpickle(handle, $0) }
    }

    
    /**
     * Create an inbound group session pickle by decrypting an encrypted pickle
     */
public static func fromEncrypted(ciphertext: String, pickleKey: Data)throws  -> InboundGroupSessionPickle  {
    return try  FfiConverterTypeInboundGroupSessionPickle_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_inboundgroupsessionpickle_from_encrypted(
        FfiConverterString.lower(ciphertext),
        FfiConverterData.lower(pickleKey),$0
    )
})
}
    

    
    /**
     * Create an encrypted pickle from this inbound group session pickle
     *
     * Note: This consumes the pickle as the encryption method takes ownership
     */
open func encrypt(pickleKey: Data)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_method_inboundgroupsessionpickle_encrypt(self.uniffiCloneHandle(),
        FfiConverterData.lower(pickleKey),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeInboundGroupSessionPickle: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = InboundGroupSessionPickle

    public static func lift(_ handle: UInt64) throws -> InboundGroupSessionPickle {
        return InboundGroupSessionPickle(unsafeFromHandle: handle)
    }

    public static func lower(_ value: InboundGroupSessionPickle) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InboundGroupSessionPickle {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: InboundGroupSessionPickle, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeInboundGroupSessionPickle_lift(_ handle: UInt64) throws -> InboundGroupSessionPickle {
    return try FfiConverterTypeInboundGroupSessionPickle.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeInboundGroupSessionPickle_lower(_ value: InboundGroupSessionPickle) -> UInt64 {
    return FfiConverterTypeInboundGroupSessionPickle.lower(value)
}






/**
 * The initial message, sent by the ECIES channel establisher.
 * This message embeds the public key of the message creator allowing the other
 * side to establish a channel using this message.
 */
public protocol InitialMessageProtocol: AnyObject, Sendable {
    
    /**
     * Get the ciphertext of the initial message.
     */
    func ciphertext()  -> Data
    
    /**
     * Encode the message as a string.
     * The string will contain the base64-encoded Curve25519 public key and the
     * ciphertext of the message separated by a `|`.
     */
    func encode()  -> String
    
    /**
     * Get the ephemeral public key that was used to establish the ECIES channel.
     */
    func publicKey()  -> Curve25519PublicKey
    
}
/**
 * The initial message, sent by the ECIES channel establisher.
 * This message embeds the public key of the message creator allowing the other
 * side to establish a channel using this message.
 */
open class InitialMessage: InitialMessageProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_initialmessage(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_initialmessage(handle, $0) }
    }

    
    /**
     * Attempt to decode a string into an InitialMessage.
     */
public static func decode(message: String)throws  -> InitialMessage  {
    return try  FfiConverterTypeInitialMessage_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_initialmessage_decode(
        FfiConverterString.lower(message),$0
    )
})
}
    

    
    /**
     * Get the ciphertext of the initial message.
     */
open func ciphertext() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_initialmessage_ciphertext(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Encode the message as a string.
     * The string will contain the base64-encoded Curve25519 public key and the
     * ciphertext of the message separated by a `|`.
     */
open func encode() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_initialmessage_encode(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Get the ephemeral public key that was used to establish the ECIES channel.
     */
open func publicKey() -> Curve25519PublicKey  {
    return try!  FfiConverterTypeCurve25519PublicKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_initialmessage_public_key(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeInitialMessage: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = InitialMessage

    public static func lift(_ handle: UInt64) throws -> InitialMessage {
        return InitialMessage(unsafeFromHandle: handle)
    }

    public static func lower(_ value: InitialMessage) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InitialMessage {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: InitialMessage, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeInitialMessage_lift(_ handle: UInt64) throws -> InitialMessage {
    return try FfiConverterTypeInitialMessage.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeInitialMessage_lower(_ value: InitialMessage) -> UInt64 {
    return FfiConverterTypeInitialMessage.lower(value)
}






/**
 * Error type for the case when we try to generate too many SAS bytes.
 */
public protocol InvalidCountProtocol: AnyObject, Sendable {
    
    /**
     * Get the error message.
     */
    func message()  -> String
    
}
/**
 * Error type for the case when we try to generate too many SAS bytes.
 */
open class InvalidCount: InvalidCountProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_invalidcount(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_invalidcount(handle, $0) }
    }

    

    
    /**
     * Get the error message.
     */
open func message() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_invalidcount_message(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeInvalidCount: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = InvalidCount

    public static func lift(_ handle: UInt64) throws -> InvalidCount {
        return InvalidCount(unsafeFromHandle: handle)
    }

    public static func lower(_ value: InvalidCount) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InvalidCount {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: InvalidCount, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeInvalidCount_lift(_ handle: UInt64) throws -> InvalidCount {
    return try FfiConverterTypeInvalidCount.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeInvalidCount_lower(_ value: InvalidCount) -> UInt64 {
    return FfiConverterTypeInvalidCount.lower(value)
}






/**
 * Key ID wrapper for UniFFI
 *
 * Pattern: Simple object with constructor and method
 */
public protocol KeyIdProtocol: AnyObject, Sendable {
    
    /**
     * Convert the KeyId to a base64 string
     *
     * Pattern: Simple method returning primitive type
     */
    func toBase64()  -> String
    
}
/**
 * Key ID wrapper for UniFFI
 *
 * Pattern: Simple object with constructor and method
 */
open class KeyId: KeyIdProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_keyid(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_keyid(handle, $0) }
    }

    
    /**
     * Create a KeyId from a u64 value
     *
     * Pattern: Simple constructor returning Arc<Self>
     */
public static func fromU64(value: UInt64) -> KeyId  {
    return try!  FfiConverterTypeKeyId_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_constructor_keyid_from_u64(
        FfiConverterUInt64.lower(value),$0
    )
})
}
    

    
    /**
     * Convert the KeyId to a base64 string
     *
     * Pattern: Simple method returning primitive type
     */
open func toBase64() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_keyid_to_base64(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeKeyId: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = KeyId

    public static func lift(_ handle: UInt64) throws -> KeyId {
        return KeyId(unsafeFromHandle: handle)
    }

    public static func lower(_ value: KeyId) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KeyId {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: KeyId, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeKeyId_lift(_ handle: UInt64) throws -> KeyId {
    return try FfiConverterTypeKeyId.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeKeyId_lower(_ value: KeyId) -> UInt64 {
    return FfiConverterTypeKeyId.lower(value)
}






/**
 * The output type for the SAS MAC calculation.
 */
public protocol MacProtocol: AnyObject, Sendable {
    
    /**
     * Get the raw bytes of the MAC.
     */
    func asBytes()  -> Data
    
    /**
     * Get the MAC as base64-encoded string.
     */
    func toBase64()  -> String
    
}
/**
 * The output type for the SAS MAC calculation.
 */
open class Mac: MacProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_mac(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_mac(handle, $0) }
    }

    

    
    /**
     * Get the raw bytes of the MAC.
     */
open func asBytes() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_mac_as_bytes(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Get the MAC as base64-encoded string.
     */
open func toBase64() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_mac_to_base64(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMac: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = Mac

    public static func lift(_ handle: UInt64) throws -> Mac {
        return Mac(unsafeFromHandle: handle)
    }

    public static func lower(_ value: Mac) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Mac {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: Mac, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMac_lift(_ handle: UInt64) throws -> Mac {
    return try FfiConverterTypeMac.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMac_lower(_ value: Mac) -> UInt64 {
    return FfiConverterTypeMac.lower(value)
}






/**
 * An encrypted Megolm message
 *
 * Contains the ciphertext, signature, and metadata for a group message
 */
public protocol MegolmMessageProtocol: AnyObject, Sendable {
    
    /**
     * Get the ciphertext
     */
    func ciphertext()  -> Data
    
    /**
     * Get the message index
     */
    func messageIndex()  -> UInt32
    
    /**
     * Convert the message to a base64 string
     */
    func toBase64()  -> String
    
    /**
     * Convert the message to bytes
     */
    func toBytes()  -> Data
    
}
/**
 * An encrypted Megolm message
 *
 * Contains the ciphertext, signature, and metadata for a group message
 */
open class MegolmMessage: MegolmMessageProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_megolmmessage(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_megolmmessage(handle, $0) }
    }

    
    /**
     * Create a MegolmMessage from a base64 string
     */
public static func fromBase64(input: String)throws  -> MegolmMessage  {
    return try  FfiConverterTypeMegolmMessage_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_megolmmessage_from_base64(
        FfiConverterString.lower(input),$0
    )
})
}
    
    /**
     * Create a MegolmMessage from bytes
     */
public static func fromBytes(bytes: Data)throws  -> MegolmMessage  {
    return try  FfiConverterTypeMegolmMessage_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_megolmmessage_from_bytes(
        FfiConverterData.lower(bytes),$0
    )
})
}
    

    
    /**
     * Get the ciphertext
     */
open func ciphertext() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_megolmmessage_ciphertext(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Get the message index
     */
open func messageIndex() -> UInt32  {
    return try!  FfiConverterUInt32.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_megolmmessage_message_index(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Convert the message to a base64 string
     */
open func toBase64() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_megolmmessage_to_base64(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Convert the message to bytes
     */
open func toBytes() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_megolmmessage_to_bytes(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMegolmMessage: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = MegolmMessage

    public static func lift(_ handle: UInt64) throws -> MegolmMessage {
        return MegolmMessage(unsafeFromHandle: handle)
    }

    public static func lower(_ value: MegolmMessage) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MegolmMessage {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: MegolmMessage, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMegolmMessage_lift(_ handle: UInt64) throws -> MegolmMessage {
    return try FfiConverterTypeMegolmMessage.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMegolmMessage_lower(_ value: MegolmMessage) -> UInt64 {
    return FfiConverterTypeMegolmMessage.lower(value)
}






/**
 * Configuration options for Megolm sessions
 *
 * This determines the version and encryption parameters used for the session
 */
public protocol MegolmSessionConfigProtocol: AnyObject, Sendable {
    
}
/**
 * Configuration options for Megolm sessions
 *
 * This determines the version and encryption parameters used for the session
 */
open class MegolmSessionConfig: MegolmSessionConfigProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_megolmsessionconfig(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_megolmsessionconfig(handle, $0) }
    }

    
    /**
     * Create a Version 1 session configuration
     *
     * Version 1 uses truncated MAC for better compatibility with older clients
     */
public static func version1() -> MegolmSessionConfig  {
    return try!  FfiConverterTypeMegolmSessionConfig_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_constructor_megolmsessionconfig_version_1($0
    )
})
}
    
    /**
     * Create a Version 2 session configuration
     *
     * Version 2 uses full MAC for better security
     */
public static func version2() -> MegolmSessionConfig  {
    return try!  FfiConverterTypeMegolmSessionConfig_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_constructor_megolmsessionconfig_version_2($0
    )
})
}
    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMegolmSessionConfig: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = MegolmSessionConfig

    public static func lift(_ handle: UInt64) throws -> MegolmSessionConfig {
        return MegolmSessionConfig(unsafeFromHandle: handle)
    }

    public static func lower(_ value: MegolmSessionConfig) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MegolmSessionConfig {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: MegolmSessionConfig, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMegolmSessionConfig_lift(_ handle: UInt64) throws -> MegolmSessionConfig {
    return try FfiConverterTypeMegolmSessionConfig.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMegolmSessionConfig_lower(_ value: MegolmSessionConfig) -> UInt64 {
    return FfiConverterTypeMegolmSessionConfig.lower(value)
}






/**
 * An encrypted message an EstablishedEcies channel has sent.
 */
public protocol MessageProtocol: AnyObject, Sendable {
    
    /**
     * Get the ciphertext bytes.
     */
    func ciphertext()  -> Data
    
    /**
     * Encode the message as a string.
     * The ciphertext bytes will be encoded using unpadded base64.
     */
    func encode()  -> String
    
}
/**
 * An encrypted message an EstablishedEcies channel has sent.
 */
open class Message: MessageProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_message(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_message(handle, $0) }
    }

    
    /**
     * Attempt to decode a base64 string into a Message.
     */
public static func decode(message: String)throws  -> Message  {
    return try  FfiConverterTypeMessage_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_message_decode(
        FfiConverterString.lower(message),$0
    )
})
}
    

    
    /**
     * Get the ciphertext bytes.
     */
open func ciphertext() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_message_ciphertext(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Encode the message as a string.
     * The ciphertext bytes will be encoded using unpadded base64.
     */
open func encode() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_message_encode(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMessage: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = Message

    public static func lift(_ handle: UInt64) throws -> Message {
        return Message(unsafeFromHandle: handle)
    }

    public static func lower(_ value: Message) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Message {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: Message, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMessage_lift(_ handle: UInt64) throws -> Message {
    return try FfiConverterTypeMessage.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMessage_lower(_ value: Message) -> UInt64 {
    return FfiConverterTypeMessage.lower(value)
}






/**
 * The result when creating an inbound Olm session.
 */
public protocol OlmInboundCreationResultProtocol: AnyObject, Sendable {
    
    /**
     * Get the decrypted plaintext of the message.
     */
    func plaintext()  -> Data
    
    /**
     * Get the created session.
     */
    func session()  -> Session
    
}
/**
 * The result when creating an inbound Olm session.
 */
open class OlmInboundCreationResult: OlmInboundCreationResultProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_olminboundcreationresult(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_olminboundcreationresult(handle, $0) }
    }

    

    
    /**
     * Get the decrypted plaintext of the message.
     */
open func plaintext() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_olminboundcreationresult_plaintext(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Get the created session.
     */
open func session() -> Session  {
    return try!  FfiConverterTypeSession_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_olminboundcreationresult_session(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeOlmInboundCreationResult: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = OlmInboundCreationResult

    public static func lift(_ handle: UInt64) throws -> OlmInboundCreationResult {
        return OlmInboundCreationResult(unsafeFromHandle: handle)
    }

    public static func lower(_ value: OlmInboundCreationResult) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OlmInboundCreationResult {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: OlmInboundCreationResult, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOlmInboundCreationResult_lift(_ handle: UInt64) throws -> OlmInboundCreationResult {
    return try FfiConverterTypeOlmInboundCreationResult.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOlmInboundCreationResult_lower(_ value: OlmInboundCreationResult) -> UInt64 {
    return FfiConverterTypeOlmInboundCreationResult.lower(value)
}






/**
 * An encrypted Olm message.
 */
public protocol OlmMessageProtocol: AnyObject, Sendable {
    
    /**
     * Get the type of this message.
     */
    func messageType()  -> MessageType
    
    /**
     * Encode the OlmMessage as a base64 string.
     */
    func toBase64()  -> String
    
}
/**
 * An encrypted Olm message.
 */
open class OlmMessage: OlmMessageProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_olmmessage(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_olmmessage(handle, $0) }
    }

    
    /**
     * Try to decode the given string as an OlmMessage.
     */
public static func fromBase64(message: String)throws  -> OlmMessage  {
    return try  FfiConverterTypeOlmMessage_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_olmmessage_from_base64(
        FfiConverterString.lower(message),$0
    )
})
}
    

    
    /**
     * Get the type of this message.
     */
open func messageType() -> MessageType  {
    return try!  FfiConverterTypeMessageType_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_olmmessage_message_type(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Encode the OlmMessage as a base64 string.
     */
open func toBase64() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_olmmessage_to_base64(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeOlmMessage: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = OlmMessage

    public static func lift(_ handle: UInt64) throws -> OlmMessage {
        return OlmMessage(unsafeFromHandle: handle)
    }

    public static func lower(_ value: OlmMessage) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OlmMessage {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: OlmMessage, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOlmMessage_lift(_ handle: UInt64) throws -> OlmMessage {
    return try FfiConverterTypeOlmMessage.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOlmMessage_lower(_ value: OlmMessage) -> UInt64 {
    return FfiConverterTypeOlmMessage.lower(value)
}






/**
 * An encrypted Olm message.
 */
public protocol OlmNormalMessageProtocol: AnyObject, Sendable {
    
    /**
     * The index of the chain that was used when the message was encrypted.
     */
    func chainIndex()  -> UInt64
    
    /**
     * The actual ciphertext of the message.
     */
    func ciphertext()  -> Data
    
    /**
     * Has the MAC been truncated in this Olm message.
     */
    func macTruncated()  -> Bool
    
    /**
     * The ratchet key that was used to encrypt this message.
     */
    func ratchetKey()  -> Curve25519PublicKey
    
    /**
     * Encode the Message as a string.
     */
    func toBase64()  -> String
    
    /**
     * Encode the Message as an array of bytes.
     */
    func toBytes()  -> Data
    
    /**
     * The version of the Olm message.
     */
    func version()  -> UInt8
    
}
/**
 * An encrypted Olm message.
 */
open class OlmNormalMessage: OlmNormalMessageProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_olmnormalmessage(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_olmnormalmessage(handle, $0) }
    }

    
    /**
     * Try to decode the given string as an Olm Message.
     */
public static func fromBase64(message: String)throws  -> OlmNormalMessage  {
    return try  FfiConverterTypeOlmNormalMessage_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_olmnormalmessage_from_base64(
        FfiConverterString.lower(message),$0
    )
})
}
    
    /**
     * Try to decode the given byte slice as an Olm Message.
     */
public static func fromBytes(bytes: Data)throws  -> OlmNormalMessage  {
    return try  FfiConverterTypeOlmNormalMessage_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_olmnormalmessage_from_bytes(
        FfiConverterData.lower(bytes),$0
    )
})
}
    

    
    /**
     * The index of the chain that was used when the message was encrypted.
     */
open func chainIndex() -> UInt64  {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_olmnormalmessage_chain_index(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * The actual ciphertext of the message.
     */
open func ciphertext() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_olmnormalmessage_ciphertext(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Has the MAC been truncated in this Olm message.
     */
open func macTruncated() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_olmnormalmessage_mac_truncated(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * The ratchet key that was used to encrypt this message.
     */
open func ratchetKey() -> Curve25519PublicKey  {
    return try!  FfiConverterTypeCurve25519PublicKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_olmnormalmessage_ratchet_key(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Encode the Message as a string.
     */
open func toBase64() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_olmnormalmessage_to_base64(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Encode the Message as an array of bytes.
     */
open func toBytes() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_olmnormalmessage_to_bytes(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * The version of the Olm message.
     */
open func version() -> UInt8  {
    return try!  FfiConverterUInt8.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_olmnormalmessage_version(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeOlmNormalMessage: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = OlmNormalMessage

    public static func lift(_ handle: UInt64) throws -> OlmNormalMessage {
        return OlmNormalMessage(unsafeFromHandle: handle)
    }

    public static func lower(_ value: OlmNormalMessage) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OlmNormalMessage {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: OlmNormalMessage, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOlmNormalMessage_lift(_ handle: UInt64) throws -> OlmNormalMessage {
    return try FfiConverterTypeOlmNormalMessage.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOlmNormalMessage_lower(_ value: OlmNormalMessage) -> UInt64 {
    return FfiConverterTypeOlmNormalMessage.lower(value)
}






/**
 * Result of generating one-time keys.
 */
public protocol OneTimeKeyGenerationResultProtocol: AnyObject, Sendable {
    
    /**
     * Get the discarded keys.
     */
    func discarded()  -> [Curve25519PublicKey]
    
    /**
     * Get the generated keys.
     */
    func generated()  -> [Curve25519PublicKey]
    
}
/**
 * Result of generating one-time keys.
 */
open class OneTimeKeyGenerationResult: OneTimeKeyGenerationResultProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_onetimekeygenerationresult(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_onetimekeygenerationresult(handle, $0) }
    }

    

    
    /**
     * Get the discarded keys.
     */
open func discarded() -> [Curve25519PublicKey]  {
    return try!  FfiConverterSequenceTypeCurve25519PublicKey.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_onetimekeygenerationresult_discarded(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Get the generated keys.
     */
open func generated() -> [Curve25519PublicKey]  {
    return try!  FfiConverterSequenceTypeCurve25519PublicKey.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_onetimekeygenerationresult_generated(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeOneTimeKeyGenerationResult: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = OneTimeKeyGenerationResult

    public static func lift(_ handle: UInt64) throws -> OneTimeKeyGenerationResult {
        return OneTimeKeyGenerationResult(unsafeFromHandle: handle)
    }

    public static func lower(_ value: OneTimeKeyGenerationResult) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OneTimeKeyGenerationResult {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: OneTimeKeyGenerationResult, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOneTimeKeyGenerationResult_lift(_ handle: UInt64) throws -> OneTimeKeyGenerationResult {
    return try FfiConverterTypeOneTimeKeyGenerationResult.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOneTimeKeyGenerationResult_lower(_ value: OneTimeKeyGenerationResult) -> UInt64 {
    return FfiConverterTypeOneTimeKeyGenerationResult.lower(value)
}






/**
 * A one-time key pair containing an ID and the key itself.
 */
public protocol OneTimeKeyPairProtocol: AnyObject, Sendable {
    
    /**
     * Get the public key.
     */
    func key()  -> Curve25519PublicKey
    
    /**
     * Get the key ID.
     */
    func keyId()  -> KeyId
    
}
/**
 * A one-time key pair containing an ID and the key itself.
 */
open class OneTimeKeyPair: OneTimeKeyPairProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_onetimekeypair(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_onetimekeypair(handle, $0) }
    }

    

    
    /**
     * Get the public key.
     */
open func key() -> Curve25519PublicKey  {
    return try!  FfiConverterTypeCurve25519PublicKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_onetimekeypair_key(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Get the key ID.
     */
open func keyId() -> KeyId  {
    return try!  FfiConverterTypeKeyId_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_onetimekeypair_key_id(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeOneTimeKeyPair: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = OneTimeKeyPair

    public static func lift(_ handle: UInt64) throws -> OneTimeKeyPair {
        return OneTimeKeyPair(unsafeFromHandle: handle)
    }

    public static func lower(_ value: OneTimeKeyPair) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OneTimeKeyPair {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: OneTimeKeyPair, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOneTimeKeyPair_lift(_ handle: UInt64) throws -> OneTimeKeyPair {
    return try FfiConverterTypeOneTimeKeyPair.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOneTimeKeyPair_lower(_ value: OneTimeKeyPair) -> UInt64 {
    return FfiConverterTypeOneTimeKeyPair.lower(value)
}






/**
 * The result of an outbound ECIES channel establishment.
 */
public protocol OutboundCreationResultProtocol: AnyObject, Sendable {
    
    /**
     * Get the established ECIES channel.
     */
    func ecies()  -> EstablishedEcies
    
    /**
     * Get the initial message.
     */
    func message()  -> InitialMessage
    
}
/**
 * The result of an outbound ECIES channel establishment.
 */
open class OutboundCreationResult: OutboundCreationResultProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_outboundcreationresult(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_outboundcreationresult(handle, $0) }
    }

    

    
    /**
     * Get the established ECIES channel.
     */
open func ecies() -> EstablishedEcies  {
    return try!  FfiConverterTypeEstablishedEcies_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_outboundcreationresult_ecies(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Get the initial message.
     */
open func message() -> InitialMessage  {
    return try!  FfiConverterTypeInitialMessage_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_outboundcreationresult_message(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeOutboundCreationResult: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = OutboundCreationResult

    public static func lift(_ handle: UInt64) throws -> OutboundCreationResult {
        return OutboundCreationResult(unsafeFromHandle: handle)
    }

    public static func lower(_ value: OutboundCreationResult) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OutboundCreationResult {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: OutboundCreationResult, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOutboundCreationResult_lift(_ handle: UInt64) throws -> OutboundCreationResult {
    return try FfiConverterTypeOutboundCreationResult.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOutboundCreationResult_lower(_ value: OutboundCreationResult) -> UInt64 {
    return FfiConverterTypeOutboundCreationResult.lower(value)
}






/**
 * An encrypted Olm pre-key message.
 */
public protocol PreKeyMessageProtocol: AnyObject, Sendable {
    
    /**
     * The base key that was created just in time by the sender of the message.
     */
    func baseKey()  -> Curve25519PublicKey
    
    /**
     * The long term identity key of the sender of the message.
     */
    func identityKey()  -> Curve25519PublicKey
    
    /**
     * The actual message that contains the ciphertext.
     */
    func message()  -> OlmNormalMessage
    
    /**
     * The one-time key that was used by the receiver of the message.
     */
    func oneTimeKey()  -> Curve25519PublicKey
    
    /**
     * Returns the globally unique session ID, in base64-encoded form.
     */
    func sessionId()  -> String
    
    /**
     * The collection of all keys required for establishing an Olm Session.
     */
    func sessionKeys()  -> SessionKeys
    
    /**
     * Encode the PreKeyMessage as a string.
     */
    func toBase64()  -> String
    
    /**
     * Encode the PreKeyMessage as an array of bytes.
     */
    func toBytes()  -> Data
    
}
/**
 * An encrypted Olm pre-key message.
 */
open class PreKeyMessage: PreKeyMessageProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_prekeymessage(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_prekeymessage(handle, $0) }
    }

    
    /**
     * Try to decode the given string as an Olm PreKeyMessage.
     */
public static func fromBase64(message: String)throws  -> PreKeyMessage  {
    return try  FfiConverterTypePreKeyMessage_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_prekeymessage_from_base64(
        FfiConverterString.lower(message),$0
    )
})
}
    
    /**
     * Try to decode the given byte slice as an Olm PreKeyMessage.
     */
public static func fromBytes(message: Data)throws  -> PreKeyMessage  {
    return try  FfiConverterTypePreKeyMessage_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_prekeymessage_from_bytes(
        FfiConverterData.lower(message),$0
    )
})
}
    

    
    /**
     * The base key that was created just in time by the sender of the message.
     */
open func baseKey() -> Curve25519PublicKey  {
    return try!  FfiConverterTypeCurve25519PublicKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_prekeymessage_base_key(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * The long term identity key of the sender of the message.
     */
open func identityKey() -> Curve25519PublicKey  {
    return try!  FfiConverterTypeCurve25519PublicKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_prekeymessage_identity_key(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * The actual message that contains the ciphertext.
     */
open func message() -> OlmNormalMessage  {
    return try!  FfiConverterTypeOlmNormalMessage_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_prekeymessage_message(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * The one-time key that was used by the receiver of the message.
     */
open func oneTimeKey() -> Curve25519PublicKey  {
    return try!  FfiConverterTypeCurve25519PublicKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_prekeymessage_one_time_key(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Returns the globally unique session ID, in base64-encoded form.
     */
open func sessionId() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_prekeymessage_session_id(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * The collection of all keys required for establishing an Olm Session.
     */
open func sessionKeys() -> SessionKeys  {
    return try!  FfiConverterTypeSessionKeys_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_prekeymessage_session_keys(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Encode the PreKeyMessage as a string.
     */
open func toBase64() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_prekeymessage_to_base64(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Encode the PreKeyMessage as an array of bytes.
     */
open func toBytes() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_prekeymessage_to_bytes(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePreKeyMessage: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = PreKeyMessage

    public static func lift(_ handle: UInt64) throws -> PreKeyMessage {
        return PreKeyMessage(unsafeFromHandle: handle)
    }

    public static func lower(_ value: PreKeyMessage) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PreKeyMessage {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: PreKeyMessage, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePreKeyMessage_lift(_ handle: UInt64) throws -> PreKeyMessage {
    return try FfiConverterTypePreKeyMessage.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePreKeyMessage_lower(_ value: PreKeyMessage) -> UInt64 {
    return FfiConverterTypePreKeyMessage.lower(value)
}






/**
 * The public part of a ratchet key pair.
 */
public protocol RatchetPublicKeyProtocol: AnyObject, Sendable {
    
    /**
     * Convert the RatchetPublicKey to a base64 encoded string.
     */
    func toBase64()  -> String
    
}
/**
 * The public part of a ratchet key pair.
 */
open class RatchetPublicKey: RatchetPublicKeyProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_ratchetpublickey(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_ratchetpublickey(handle, $0) }
    }

    
    /**
     * Try to create a RatchetPublicKey from the given base64 encoded string.
     */
public static func fromBase64(key: String)throws  -> RatchetPublicKey  {
    return try  FfiConverterTypeRatchetPublicKey_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_ratchetpublickey_from_base64(
        FfiConverterString.lower(key),$0
    )
})
}
    

    
    /**
     * Convert the RatchetPublicKey to a base64 encoded string.
     */
open func toBase64() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_ratchetpublickey_to_base64(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRatchetPublicKey: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = RatchetPublicKey

    public static func lift(_ handle: UInt64) throws -> RatchetPublicKey {
        return RatchetPublicKey(unsafeFromHandle: handle)
    }

    public static func lower(_ value: RatchetPublicKey) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RatchetPublicKey {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: RatchetPublicKey, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRatchetPublicKey_lift(_ handle: UInt64) throws -> RatchetPublicKey {
    return try FfiConverterTypeRatchetPublicKey.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRatchetPublicKey_lower(_ value: RatchetPublicKey) -> UInt64 {
    return FfiConverterTypeRatchetPublicKey.lower(value)
}






/**
 * A struct representing a short auth string verification object.
 */
public protocol SasProtocol: AnyObject, Sendable {
    
    /**
     * Establish a SAS secret by performing a DH handshake with another public key.
     *
     * Returns an EstablishedSas object which can be used to generate SasBytes.
     */
    func diffieHellman(theirPublicKey: Curve25519PublicKey) throws  -> EstablishedSas
    
    /**
     * Establish a SAS secret by performing a DH handshake with another public key
     * in "raw", base64-encoded form.
     */
    func diffieHellmanWithRaw(otherPublicKey: String) throws  -> EstablishedSas
    
    /**
     * Get the public key that can be used to establish a shared secret.
     */
    func publicKey() throws  -> Curve25519PublicKey
    
}
/**
 * A struct representing a short auth string verification object.
 */
open class Sas: SasProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_sas(self.handle, $0) }
    }
    /**
     * Create a new SAS verification object.
     */
public convenience init() {
    let handle =
        try! rustCall() {
    uniffi_vodozemac_bindings_fn_constructor_sas_new($0
    )
}
    self.init(unsafeFromHandle: handle)
}

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_sas(handle, $0) }
    }

    

    
    /**
     * Establish a SAS secret by performing a DH handshake with another public key.
     *
     * Returns an EstablishedSas object which can be used to generate SasBytes.
     */
open func diffieHellman(theirPublicKey: Curve25519PublicKey)throws  -> EstablishedSas  {
    return try  FfiConverterTypeEstablishedSas_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_method_sas_diffie_hellman(self.uniffiCloneHandle(),
        FfiConverterTypeCurve25519PublicKey_lower(theirPublicKey),$0
    )
})
}
    
    /**
     * Establish a SAS secret by performing a DH handshake with another public key
     * in "raw", base64-encoded form.
     */
open func diffieHellmanWithRaw(otherPublicKey: String)throws  -> EstablishedSas  {
    return try  FfiConverterTypeEstablishedSas_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_method_sas_diffie_hellman_with_raw(self.uniffiCloneHandle(),
        FfiConverterString.lower(otherPublicKey),$0
    )
})
}
    
    /**
     * Get the public key that can be used to establish a shared secret.
     */
open func publicKey()throws  -> Curve25519PublicKey  {
    return try  FfiConverterTypeCurve25519PublicKey_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_method_sas_public_key(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSas: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = Sas

    public static func lift(_ handle: UInt64) throws -> Sas {
        return Sas(unsafeFromHandle: handle)
    }

    public static func lower(_ value: Sas) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Sas {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: Sas, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSas_lift(_ handle: UInt64) throws -> Sas {
    return try FfiConverterTypeSas.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSas_lower(_ value: Sas) -> UInt64 {
    return FfiConverterTypeSas.lower(value)
}






/**
 * Bytes generated from a shared secret that can be used as the short auth string.
 */
public protocol SasBytesProtocol: AnyObject, Sendable {
    
    /**
     * Get the raw bytes of the short auth string.
     */
    func asBytes()  -> Data
    
    /**
     * Get the three decimal numbers that can be presented to users to perform
     * the key verification.
     */
    func decimals()  -> [UInt16]
    
    /**
     * Get the seven emoji indices that can be presented to users to perform
     * the key verification.
     *
     * The table that maps the index to an emoji can be found in the spec.
     */
    func emojiIndices()  -> Data
    
}
/**
 * Bytes generated from a shared secret that can be used as the short auth string.
 */
open class SasBytes: SasBytesProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_sasbytes(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_sasbytes(handle, $0) }
    }

    

    
    /**
     * Get the raw bytes of the short auth string.
     */
open func asBytes() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_sasbytes_as_bytes(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Get the three decimal numbers that can be presented to users to perform
     * the key verification.
     */
open func decimals() -> [UInt16]  {
    return try!  FfiConverterSequenceUInt16.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_sasbytes_decimals(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Get the seven emoji indices that can be presented to users to perform
     * the key verification.
     *
     * The table that maps the index to an emoji can be found in the spec.
     */
open func emojiIndices() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_sasbytes_emoji_indices(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSasBytes: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = SasBytes

    public static func lift(_ handle: UInt64) throws -> SasBytes {
        return SasBytes(unsafeFromHandle: handle)
    }

    public static func lower(_ value: SasBytes) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SasBytes {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: SasBytes, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSasBytes_lift(_ handle: UInt64) throws -> SasBytes {
    return try FfiConverterTypeSasBytes.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSasBytes_lower(_ value: SasBytes) -> UInt64 {
    return FfiConverterTypeSasBytes.lower(value)
}






/**
 * An Olm session represents one end of an encrypted communication channel.
 */
public protocol SessionProtocol: AnyObject, Sendable {
    
    /**
     * Try to decrypt an Olm message.
     */
    func decrypt(message: OlmMessage) throws  -> Data
    
    /**
     * Encrypt the plaintext and construct an OlmMessage.
     */
    func encrypt(plaintext: Data)  -> OlmMessage
    
    /**
     * Have we ever received and decrypted a message from the other side?
     */
    func hasReceivedMessage()  -> Bool
    
    /**
     * Convert the session into a struct which implements serde::Serialize and serde::Deserialize.
     */
    func pickle()  -> SessionPickle
    
    /**
     * Get the SessionConfig that this Session is configured to use.
     */
    func sessionConfig()  -> SessionConfig
    
    /**
     * Returns the globally unique session ID, in base64-encoded form.
     */
    func sessionId()  -> String
    
    /**
     * Get the keys associated with this session.
     */
    func sessionKeys()  -> SessionKeys
    
}
/**
 * An Olm session represents one end of an encrypted communication channel.
 */
open class Session: SessionProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_session(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_session(handle, $0) }
    }

    
    /**
     * Create a Session object by unpickling a session pickle in libolm legacy pickle format.
     */
public static func fromLibolmPickle(pickle: String, pickleKey: Data)throws  -> Session  {
    return try  FfiConverterTypeSession_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_session_from_libolm_pickle(
        FfiConverterString.lower(pickle),
        FfiConverterData.lower(pickleKey),$0
    )
})
}
    
    /**
     * Restore a Session from a previously saved SessionPickle.
     */
public static func fromPickle(pickle: SessionPickle)throws  -> Session  {
    return try  FfiConverterTypeSession_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_session_from_pickle(
        FfiConverterTypeSessionPickle_lower(pickle),$0
    )
})
}
    

    
    /**
     * Try to decrypt an Olm message.
     */
open func decrypt(message: OlmMessage)throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_method_session_decrypt(self.uniffiCloneHandle(),
        FfiConverterTypeOlmMessage_lower(message),$0
    )
})
}
    
    /**
     * Encrypt the plaintext and construct an OlmMessage.
     */
open func encrypt(plaintext: Data) -> OlmMessage  {
    return try!  FfiConverterTypeOlmMessage_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_session_encrypt(self.uniffiCloneHandle(),
        FfiConverterData.lower(plaintext),$0
    )
})
}
    
    /**
     * Have we ever received and decrypted a message from the other side?
     */
open func hasReceivedMessage() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_session_has_received_message(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Convert the session into a struct which implements serde::Serialize and serde::Deserialize.
     */
open func pickle() -> SessionPickle  {
    return try!  FfiConverterTypeSessionPickle_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_session_pickle(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Get the SessionConfig that this Session is configured to use.
     */
open func sessionConfig() -> SessionConfig  {
    return try!  FfiConverterTypeSessionConfig_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_session_session_config(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Returns the globally unique session ID, in base64-encoded form.
     */
open func sessionId() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_session_session_id(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Get the keys associated with this session.
     */
open func sessionKeys() -> SessionKeys  {
    return try!  FfiConverterTypeSessionKeys_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_session_session_keys(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSession: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = Session

    public static func lift(_ handle: UInt64) throws -> Session {
        return Session(unsafeFromHandle: handle)
    }

    public static func lower(_ value: Session) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Session {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: Session, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSession_lift(_ handle: UInt64) throws -> Session {
    return try FfiConverterTypeSession.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSession_lower(_ value: Session) -> UInt64 {
    return FfiConverterTypeSession.lower(value)
}






/**
 * Session configuration for Olm sessions.
 */
public protocol SessionConfigProtocol: AnyObject, Sendable {
    
}
/**
 * Session configuration for Olm sessions.
 */
open class SessionConfig: SessionConfigProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_sessionconfig(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_sessionconfig(handle, $0) }
    }

    
    /**
     * Create a default SessionConfig.
     */
public static func `default`() -> SessionConfig  {
    return try!  FfiConverterTypeSessionConfig_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_constructor_sessionconfig_default($0
    )
})
}
    
    /**
     * Create a SessionConfig for Olm version 1.
     */
public static func version1() -> SessionConfig  {
    return try!  FfiConverterTypeSessionConfig_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_constructor_sessionconfig_version_1($0
    )
})
}
    
    /**
     * Create a SessionConfig for Olm version 2.
     */
public static func version2() -> SessionConfig  {
    return try!  FfiConverterTypeSessionConfig_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_constructor_sessionconfig_version_2($0
    )
})
}
    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSessionConfig: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = SessionConfig

    public static func lift(_ handle: UInt64) throws -> SessionConfig {
        return SessionConfig(unsafeFromHandle: handle)
    }

    public static func lower(_ value: SessionConfig) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SessionConfig {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: SessionConfig, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionConfig_lift(_ handle: UInt64) throws -> SessionConfig {
    return try FfiConverterTypeSessionConfig.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionConfig_lower(_ value: SessionConfig) -> UInt64 {
    return FfiConverterTypeSessionConfig.lower(value)
}






/**
 * A session key that can be used to create an InboundGroupSession
 *
 * Contains the signed session key for authentication
 */
public protocol SessionKeyProtocol: AnyObject, Sendable {
    
    /**
     * Convert the session key to a base64 string
     */
    func toBase64()  -> String
    
    /**
     * Convert the session key to bytes
     */
    func toBytes()  -> Data
    
}
/**
 * A session key that can be used to create an InboundGroupSession
 *
 * Contains the signed session key for authentication
 */
open class SessionKey: SessionKeyProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_sessionkey(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_sessionkey(handle, $0) }
    }

    
    /**
     * Create a SessionKey from a base64 string
     */
public static func fromBase64(input: String)throws  -> SessionKey  {
    return try  FfiConverterTypeSessionKey_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_sessionkey_from_base64(
        FfiConverterString.lower(input),$0
    )
})
}
    
    /**
     * Create a SessionKey from bytes
     */
public static func fromBytes(bytes: Data)throws  -> SessionKey  {
    return try  FfiConverterTypeSessionKey_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_sessionkey_from_bytes(
        FfiConverterData.lower(bytes),$0
    )
})
}
    

    
    /**
     * Convert the session key to a base64 string
     */
open func toBase64() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_sessionkey_to_base64(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Convert the session key to bytes
     */
open func toBytes() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_sessionkey_to_bytes(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSessionKey: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = SessionKey

    public static func lift(_ handle: UInt64) throws -> SessionKey {
        return SessionKey(unsafeFromHandle: handle)
    }

    public static func lower(_ value: SessionKey) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SessionKey {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: SessionKey, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionKey_lift(_ handle: UInt64) throws -> SessionKey {
    return try FfiConverterTypeSessionKey.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionKey_lower(_ value: SessionKey) -> UInt64 {
    return FfiConverterTypeSessionKey.lower(value)
}






/**
 * Session keys for an Olm session.
 */
public protocol SessionKeysProtocol: AnyObject, Sendable {
    
    /**
     * The base key, a single-use Curve25519 key.
     */
    func baseKey()  -> Curve25519PublicKey
    
    /**
     * The identity key, a long-lived Ed25519 key.
     */
    func identityKey()  -> Curve25519PublicKey
    
    /**
     * The one time key, a single-use Curve25519 key.
     */
    func oneTimeKey()  -> Curve25519PublicKey
    
    /**
     * Returns the globally unique session ID, in base64-encoded form.
     */
    func sessionId()  -> String
    
}
/**
 * Session keys for an Olm session.
 */
open class SessionKeys: SessionKeysProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_sessionkeys(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_sessionkeys(handle, $0) }
    }

    

    
    /**
     * The base key, a single-use Curve25519 key.
     */
open func baseKey() -> Curve25519PublicKey  {
    return try!  FfiConverterTypeCurve25519PublicKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_sessionkeys_base_key(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * The identity key, a long-lived Ed25519 key.
     */
open func identityKey() -> Curve25519PublicKey  {
    return try!  FfiConverterTypeCurve25519PublicKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_sessionkeys_identity_key(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * The one time key, a single-use Curve25519 key.
     */
open func oneTimeKey() -> Curve25519PublicKey  {
    return try!  FfiConverterTypeCurve25519PublicKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_sessionkeys_one_time_key(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Returns the globally unique session ID, in base64-encoded form.
     */
open func sessionId() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_sessionkeys_session_id(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSessionKeys: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = SessionKeys

    public static func lift(_ handle: UInt64) throws -> SessionKeys {
        return SessionKeys(unsafeFromHandle: handle)
    }

    public static func lower(_ value: SessionKeys) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SessionKeys {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: SessionKeys, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionKeys_lift(_ handle: UInt64) throws -> SessionKeys {
    return try FfiConverterTypeSessionKeys.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionKeys_lower(_ value: SessionKeys) -> UInt64 {
    return FfiConverterTypeSessionKeys.lower(value)
}






/**
 * A struct representing the pickled Session.
 */
public protocol SessionPickleProtocol: AnyObject, Sendable {
    
    /**
     * Serialize and encrypt the pickle using the given key.
     */
    func encrypt(pickleKey: Data) throws  -> String
    
}
/**
 * A struct representing the pickled Session.
 */
open class SessionPickle: SessionPickleProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_sessionpickle(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_sessionpickle(handle, $0) }
    }

    
    /**
     * Obtain a pickle from a ciphertext by decrypting and deserializing using the given key.
     */
public static func fromEncrypted(ciphertext: String, pickleKey: Data)throws  -> SessionPickle  {
    return try  FfiConverterTypeSessionPickle_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_sessionpickle_from_encrypted(
        FfiConverterString.lower(ciphertext),
        FfiConverterData.lower(pickleKey),$0
    )
})
}
    

    
    /**
     * Serialize and encrypt the pickle using the given key.
     */
open func encrypt(pickleKey: Data)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_method_sessionpickle_encrypt(self.uniffiCloneHandle(),
        FfiConverterData.lower(pickleKey),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSessionPickle: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = SessionPickle

    public static func lift(_ handle: UInt64) throws -> SessionPickle {
        return SessionPickle(unsafeFromHandle: handle)
    }

    public static func lower(_ value: SessionPickle) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SessionPickle {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: SessionPickle, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionPickle_lift(_ handle: UInt64) throws -> SessionPickle {
    return try FfiConverterTypeSessionPickle.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionPickle_lower(_ value: SessionPickle) -> UInt64 {
    return FfiConverterTypeSessionPickle.lower(value)
}






/**
 * Wrapper around vodozemac::SharedSecret
 *
 * The result of a Diffie-Hellman key exchange
 */
public protocol SharedSecretProtocol: AnyObject, Sendable {
    
    /**
     * View this shared secret as a byte array
     *
     * Pattern: Method returning Vec<u8>
     */
    func asBytes()  -> Data
    
    /**
     * Convert the shared secret to bytes
     *
     * Pattern: Method returning Vec<u8>
     */
    func toBytes()  -> Data
    
    /**
     * Check if the key exchange was contributory
     *
     * Returns true if the key exchange was contributory (good),
     * false otherwise (can be bad for some protocols)
     *
     * Pattern: Method returning primitive type (bool)
     */
    func wasContributory()  -> Bool
    
}
/**
 * Wrapper around vodozemac::SharedSecret
 *
 * The result of a Diffie-Hellman key exchange
 */
open class SharedSecret: SharedSecretProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_sharedsecret(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_sharedsecret(handle, $0) }
    }

    

    
    /**
     * View this shared secret as a byte array
     *
     * Pattern: Method returning Vec<u8>
     */
open func asBytes() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_sharedsecret_as_bytes(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Convert the shared secret to bytes
     *
     * Pattern: Method returning Vec<u8>
     */
open func toBytes() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_sharedsecret_to_bytes(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Check if the key exchange was contributory
     *
     * Returns true if the key exchange was contributory (good),
     * false otherwise (can be bad for some protocols)
     *
     * Pattern: Method returning primitive type (bool)
     */
open func wasContributory() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_sharedsecret_was_contributory(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSharedSecret: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = SharedSecret

    public static func lift(_ handle: UInt64) throws -> SharedSecret {
        return SharedSecret(unsafeFromHandle: handle)
    }

    public static func lower(_ value: SharedSecret) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SharedSecret {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: SharedSecret, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSharedSecret_lift(_ handle: UInt64) throws -> SharedSecret {
    return try FfiConverterTypeSharedSecret.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSharedSecret_lower(_ value: SharedSecret) -> UInt64 {
    return FfiConverterTypeSharedSecret.lower(value)
}




/**
 * Result from dehydrated device creation.
 */
public struct DehydratedDeviceResult {
    public var ciphertext: String
    public var nonce: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(ciphertext: String, nonce: String) {
        self.ciphertext = ciphertext
        self.nonce = nonce
    }
}

#if compiler(>=6)
extension DehydratedDeviceResult: Sendable {}
#endif


extension DehydratedDeviceResult: Equatable, Hashable {
    public static func ==(lhs: DehydratedDeviceResult, rhs: DehydratedDeviceResult) -> Bool {
        if lhs.ciphertext != rhs.ciphertext {
            return false
        }
        if lhs.nonce != rhs.nonce {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(ciphertext)
        hasher.combine(nonce)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDehydratedDeviceResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DehydratedDeviceResult {
        return
            try DehydratedDeviceResult(
                ciphertext: FfiConverterString.read(from: &buf), 
                nonce: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: DehydratedDeviceResult, into buf: inout [UInt8]) {
        FfiConverterString.write(value.ciphertext, into: &buf)
        FfiConverterString.write(value.nonce, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDehydratedDeviceResult_lift(_ buf: RustBuffer) throws -> DehydratedDeviceResult {
    return try FfiConverterTypeDehydratedDeviceResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDehydratedDeviceResult_lower(_ value: DehydratedDeviceResult) -> RustBuffer {
    return FfiConverterTypeDehydratedDeviceResult.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum MessageType {
    
    case normal
    case preKey
}


#if compiler(>=6)
extension MessageType: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMessageType: FfiConverterRustBuffer {
    typealias SwiftType = MessageType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MessageType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .normal
        
        case 2: return .preKey
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: MessageType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .normal:
            writeInt(&buf, Int32(1))
        
        
        case .preKey:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMessageType_lift(_ buf: RustBuffer) throws -> MessageType {
    return try FfiConverterTypeMessageType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMessageType_lower(_ value: MessageType) -> RustBuffer {
    return FfiConverterTypeMessageType.lower(value)
}


extension MessageType: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum SessionOrdering {
    
    case equal
    case better
    case worse
    case unconnected
}


#if compiler(>=6)
extension SessionOrdering: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSessionOrdering: FfiConverterRustBuffer {
    typealias SwiftType = SessionOrdering

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SessionOrdering {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .equal
        
        case 2: return .better
        
        case 3: return .worse
        
        case 4: return .unconnected
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SessionOrdering, into buf: inout [UInt8]) {
        switch value {
        
        
        case .equal:
            writeInt(&buf, Int32(1))
        
        
        case .better:
            writeInt(&buf, Int32(2))
        
        
        case .worse:
            writeInt(&buf, Int32(3))
        
        
        case .unconnected:
            writeInt(&buf, Int32(4))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionOrdering_lift(_ buf: RustBuffer) throws -> SessionOrdering {
    return try FfiConverterTypeSessionOrdering.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionOrdering_lower(_ value: SessionOrdering) -> RustBuffer {
    return FfiConverterTypeSessionOrdering.lower(value)
}


extension SessionOrdering: Equatable, Hashable {}







public enum VodozemacError: Swift.Error {

    
    
    case Base64Decode(message: String)
    
    case ProtoBufDecode(message: String)
    
    case Decode(message: String)
    
    case DehydratedDevice(message: String)
    
    case Key(message: String)
    
    case LibolmPickle(message: String)
    
    case Pickle(message: String)
    
    case Signature(message: String)
    
    case Ecies(message: String)
    
    case MegolmDecryption(message: String)
    
    case OlmDecryption(message: String)
    
    case SessionCreation(message: String)
    
    case SessionKeyDecode(message: String)
    
    case Sas(message: String)
    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeVodozemacError: FfiConverterRustBuffer {
    typealias SwiftType = VodozemacError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VodozemacError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Base64Decode(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .ProtoBufDecode(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .Decode(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .DehydratedDevice(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .Key(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .LibolmPickle(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .Pickle(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 8: return .Signature(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 9: return .Ecies(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 10: return .MegolmDecryption(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 11: return .OlmDecryption(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 12: return .SessionCreation(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 13: return .SessionKeyDecode(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 14: return .Sas(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: VodozemacError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .Base64Decode(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .ProtoBufDecode(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .Decode(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .DehydratedDevice(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .Key(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))
        case .LibolmPickle(_ /* message is ignored*/):
            writeInt(&buf, Int32(6))
        case .Pickle(_ /* message is ignored*/):
            writeInt(&buf, Int32(7))
        case .Signature(_ /* message is ignored*/):
            writeInt(&buf, Int32(8))
        case .Ecies(_ /* message is ignored*/):
            writeInt(&buf, Int32(9))
        case .MegolmDecryption(_ /* message is ignored*/):
            writeInt(&buf, Int32(10))
        case .OlmDecryption(_ /* message is ignored*/):
            writeInt(&buf, Int32(11))
        case .SessionCreation(_ /* message is ignored*/):
            writeInt(&buf, Int32(12))
        case .SessionKeyDecode(_ /* message is ignored*/):
            writeInt(&buf, Int32(13))
        case .Sas(_ /* message is ignored*/):
            writeInt(&buf, Int32(14))

        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVodozemacError_lift(_ buf: RustBuffer) throws -> VodozemacError {
    return try FfiConverterTypeVodozemacError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVodozemacError_lower(_ value: VodozemacError) -> RustBuffer {
    return FfiConverterTypeVodozemacError.lower(value)
}


extension VodozemacError: Equatable, Hashable {}




extension VodozemacError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeCurve25519PublicKey: FfiConverterRustBuffer {
    typealias SwiftType = Curve25519PublicKey?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeCurve25519PublicKey.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeCurve25519PublicKey.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeExportedSessionKey: FfiConverterRustBuffer {
    typealias SwiftType = ExportedSessionKey?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeExportedSessionKey.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeExportedSessionKey.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceUInt16: FfiConverterRustBuffer {
    typealias SwiftType = [UInt16]

    public static func write(_ value: [UInt16], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt16.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt16] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt16]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt16.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeCurve25519PublicKey: FfiConverterRustBuffer {
    typealias SwiftType = [Curve25519PublicKey]

    public static func write(_ value: [Curve25519PublicKey], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeCurve25519PublicKey.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Curve25519PublicKey] {
        let len: Int32 = try readInt(&buf)
        var seq = [Curve25519PublicKey]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeCurve25519PublicKey.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeOneTimeKeyPair: FfiConverterRustBuffer {
    typealias SwiftType = [OneTimeKeyPair]

    public static func write(_ value: [OneTimeKeyPair], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeOneTimeKeyPair.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [OneTimeKeyPair] {
        let len: Int32 = try readInt(&buf)
        var seq = [OneTimeKeyPair]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeOneTimeKeyPair.read(from: &buf))
        }
        return seq
    }
}
public func base64Decode(input: String)throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_func_base64_decode(
        FfiConverterString.lower(input),$0
    )
})
}
public func base64Encode(input: Data) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_func_base64_encode(
        FfiConverterData.lower(input),$0
    )
})
}
public func getVersion() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_func_get_version($0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_vodozemac_bindings_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_func_base64_decode() != 3805) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_func_base64_encode() != 38810) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_func_get_version() != 41157) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_account_create_inbound_session() != 4017) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_account_create_outbound_session() != 25411) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_account_curve25519_key() != 46083) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_account_ed25519_key() != 25572) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_account_forget_fallback_key() != 59745) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_account_generate_fallback_key() != 874) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_account_generate_one_time_keys() != 60005) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_account_identity_keys() != 12307) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_account_mark_keys_as_published() != 19654) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_account_max_number_of_one_time_keys() != 2024) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_account_one_time_keys() != 4649) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_account_pickle() != 63367) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_account_sign() != 59687) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_account_stored_one_time_key_count() != 28906) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_account_to_dehydrated_device() != 55593) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_account_to_libolm_pickle() != 21057) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_accountpickle_encrypt() != 11744) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_checkcode_as_bytes() != 60996) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_checkcode_to_digit() != 44933) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_curve25519publickey_as_bytes() != 31053) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_curve25519publickey_to_base64() != 25568) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_curve25519publickey_to_bytes() != 51368) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_curve25519publickey_to_vec() != 30420) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_curve25519secretkey_public_key() != 57764) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_curve25519secretkey_to_bytes() != 6874) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_decryptedmessage_message_index() != 29795) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_decryptedmessage_plaintext() != 2578) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_ecies_establish_inbound_channel() != 10409) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_ecies_establish_outbound_channel() != 49028) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_ecies_public_key() != 16617) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_ed25519keypair_public_key() != 59175) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_ed25519keypair_sign() != 33429) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_ed25519publickey_as_bytes() != 30460) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_ed25519publickey_to_base64() != 16715) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_ed25519publickey_verify() != 60604) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_ed25519secretkey_public_key() != 25167) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_ed25519secretkey_sign() != 64533) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_ed25519secretkey_to_base64() != 28907) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_ed25519secretkey_to_bytes() != 15165) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_ed25519signature_to_base64() != 34735) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_ed25519signature_to_bytes() != 14918) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_establishedecies_check_code() != 18772) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_establishedecies_decrypt() != 17154) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_establishedecies_encrypt() != 23527) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_establishedecies_public_key() != 37246) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_establishedsas_bytes() != 31486) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_establishedsas_bytes_raw() != 61019) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_establishedsas_calculate_mac() != 55299) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_establishedsas_calculate_mac_invalid_base64() != 55511) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_establishedsas_our_public_key() != 17153) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_establishedsas_their_public_key() != 25334) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_establishedsas_verify_mac() != 16256) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_exportedsessionkey_to_base64() != 1410) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_exportedsessionkey_to_bytes() != 61941) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_groupsession_encrypt() != 7876) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_groupsession_message_index() != 49074) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_groupsession_pickle() != 54089) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_groupsession_session_id() != 43559) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_groupsession_session_key() != 646) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_groupsessionpickle_encrypt() != 28135) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_identitykeys_curve25519() != 63709) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_identitykeys_ed25519() != 44146) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_inboundcreationresult_ecies() != 11349) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_inboundcreationresult_message() != 15609) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_inboundgroupsession_compare() != 5392) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_inboundgroupsession_decrypt() != 28174) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_inboundgroupsession_export_at() != 62832) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_inboundgroupsession_first_known_index() != 31370) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_inboundgroupsession_pickle() != 54411) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_inboundgroupsession_session_id() != 41220) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_inboundgroupsessionpickle_encrypt() != 59401) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_initialmessage_ciphertext() != 7177) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_initialmessage_encode() != 28549) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_initialmessage_public_key() != 50433) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_invalidcount_message() != 59663) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_keyid_to_base64() != 49710) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_mac_as_bytes() != 49616) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_mac_to_base64() != 19443) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_megolmmessage_ciphertext() != 43675) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_megolmmessage_message_index() != 22107) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_megolmmessage_to_base64() != 2385) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_megolmmessage_to_bytes() != 47654) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_message_ciphertext() != 8011) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_message_encode() != 47764) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_olminboundcreationresult_plaintext() != 18673) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_olminboundcreationresult_session() != 19130) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_olmmessage_message_type() != 45969) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_olmmessage_to_base64() != 17800) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_olmnormalmessage_chain_index() != 42997) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_olmnormalmessage_ciphertext() != 63852) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_olmnormalmessage_mac_truncated() != 21565) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_olmnormalmessage_ratchet_key() != 46) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_olmnormalmessage_to_base64() != 9297) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_olmnormalmessage_to_bytes() != 27944) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_olmnormalmessage_version() != 19874) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_onetimekeygenerationresult_discarded() != 63940) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_onetimekeygenerationresult_generated() != 27873) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_onetimekeypair_key() != 25509) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_onetimekeypair_key_id() != 44258) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_outboundcreationresult_ecies() != 10725) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_outboundcreationresult_message() != 48813) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_prekeymessage_base_key() != 25867) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_prekeymessage_identity_key() != 41221) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_prekeymessage_message() != 23572) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_prekeymessage_one_time_key() != 50455) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_prekeymessage_session_id() != 26525) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_prekeymessage_session_keys() != 46810) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_prekeymessage_to_base64() != 38102) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_prekeymessage_to_bytes() != 34591) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_ratchetpublickey_to_base64() != 7033) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_sas_diffie_hellman() != 18708) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_sas_diffie_hellman_with_raw() != 8967) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_sas_public_key() != 5443) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_sasbytes_as_bytes() != 29287) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_sasbytes_decimals() != 12509) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_sasbytes_emoji_indices() != 11506) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_session_decrypt() != 31268) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_session_encrypt() != 40615) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_session_has_received_message() != 50342) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_session_pickle() != 18560) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_session_session_config() != 35093) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_session_session_id() != 16415) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_session_session_keys() != 23544) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_sessionkey_to_base64() != 58428) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_sessionkey_to_bytes() != 13408) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_sessionkeys_base_key() != 40271) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_sessionkeys_identity_key() != 32075) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_sessionkeys_one_time_key() != 62636) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_sessionkeys_session_id() != 51377) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_sessionpickle_encrypt() != 40486) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_sharedsecret_as_bytes() != 9990) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_sharedsecret_to_bytes() != 13349) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_sharedsecret_was_contributory() != 30755) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_account_from_dehydrated_device() != 22868) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_account_from_libolm_pickle() != 19721) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_account_from_pickle() != 7541) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_account_new() != 29133) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_accountpickle_from_encrypted() != 27196) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_curve25519publickey_from_base64() != 44436) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_curve25519publickey_from_bytes() != 14862) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_curve25519publickey_from_slice() != 37334) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_curve25519secretkey_from_slice() != 4143) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_curve25519secretkey_new() != 44920) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_ecies_new() != 28587) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_ecies_with_info() != 457) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_ed25519keypair_new() != 55338) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_ed25519publickey_from_base64() != 49198) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_ed25519publickey_from_slice() != 9931) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_ed25519secretkey_from_base64() != 49991) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_ed25519secretkey_from_slice() != 42166) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_ed25519secretkey_new() != 5343) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_ed25519signature_from_base64() != 54087) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_ed25519signature_from_slice() != 57535) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_exportedsessionkey_from_base64() != 3734) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_exportedsessionkey_from_bytes() != 59495) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_groupsession_from_pickle() != 14852) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_groupsession_new() != 33028) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_groupsession_with_config() != 7668) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_groupsessionpickle_from_encrypted() != 20794) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_inboundgroupsession_from_pickle() != 63106) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_inboundgroupsession_import() != 60255) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_inboundgroupsession_new() != 39664) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_inboundgroupsessionpickle_from_encrypted() != 60286) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_initialmessage_decode() != 17149) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_keyid_from_u64() != 55467) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_megolmmessage_from_base64() != 41060) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_megolmmessage_from_bytes() != 2866) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_megolmsessionconfig_version_1() != 44802) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_megolmsessionconfig_version_2() != 29804) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_message_decode() != 46255) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_olmmessage_from_base64() != 18909) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_olmnormalmessage_from_base64() != 24054) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_olmnormalmessage_from_bytes() != 39081) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_prekeymessage_from_base64() != 27497) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_prekeymessage_from_bytes() != 5557) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_ratchetpublickey_from_base64() != 42368) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_sas_new() != 21335) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_session_from_libolm_pickle() != 59596) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_session_from_pickle() != 43585) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_sessionconfig_default() != 21567) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_sessionconfig_version_1() != 62894) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_sessionconfig_version_2() != 6566) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_sessionkey_from_base64() != 53706) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_sessionkey_from_bytes() != 2146) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_sessionpickle_from_encrypted() != 21229) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureVodozemacBindingsInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all