// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(vodozemacFFI)
import vodozemacFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_vodozemac_bindings_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_vodozemac_bindings_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureVodozemacBindingsInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
// Initial value and increment amount for handles. 
// These ensure that SWIFT handles always have the lowest bit set
fileprivate let UNIFFI_HANDLEMAP_INITIAL: UInt64 = 1
fileprivate let UNIFFI_HANDLEMAP_DELTA: UInt64 = 2

fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = UNIFFI_HANDLEMAP_INITIAL

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            return doInsert(obj)
        }
    }

    // Low-level insert function, this assumes `lock` is held.
    private func doInsert(_ obj: T) -> UInt64 {
        let handle = currentHandle
        currentHandle += UNIFFI_HANDLEMAP_DELTA
        map[handle] = obj
        return handle
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

     func clone(handle: UInt64) throws -> UInt64 {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return doInsert(obj)
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




/**
 * Wrapper around vodozemac::Curve25519PublicKey
 *
 * Pattern: Complex object with multiple constructors, error handling, and various return types
 */
public protocol Curve25519PublicKeyProtocol: AnyObject, Sendable {
    
    /**
     * View the public key as bytes
     *
     * Pattern: Method returning Vec<u8> (mapped to Swift Data)
     */
    func asBytes()  -> Data
    
    /**
     * Convert the public key to a base64 string
     *
     * Pattern: Method returning primitive type (String)
     */
    func toBase64()  -> String
    
    /**
     * Convert the public key to bytes
     *
     * Pattern: Method returning Vec<u8> (mapped to Swift Data)
     */
    func toBytes()  -> Data
    
    /**
     * Convert the public key to a vector of bytes
     *
     * Pattern: Method returning Vec<u8> (mapped to Swift Data)
     */
    func toVec()  -> Data
    
}
/**
 * Wrapper around vodozemac::Curve25519PublicKey
 *
 * Pattern: Complex object with multiple constructors, error handling, and various return types
 */
open class Curve25519PublicKey: Curve25519PublicKeyProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_curve25519publickey(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_curve25519publickey(handle, $0) }
    }

    
    /**
     * Create a Curve25519PublicKey from a base64 string
     *
     * Pattern: Fallible constructor with error handling
     */
public static func fromBase64(input: String)throws  -> Curve25519PublicKey  {
    return try  FfiConverterTypeCurve25519PublicKey_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_curve25519publickey_from_base64(
        FfiConverterString.lower(input),$0
    )
})
}
    
    /**
     * Create a Curve25519PublicKey from exactly 32 bytes
     *
     * Pattern: Infallible constructor (panics on invalid input)
     */
public static func fromBytes(bytes: Data) -> Curve25519PublicKey  {
    return try!  FfiConverterTypeCurve25519PublicKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_constructor_curve25519publickey_from_bytes(
        FfiConverterData.lower(bytes),$0
    )
})
}
    
    /**
     * Create a Curve25519PublicKey from a slice of bytes
     *
     * Pattern: Fallible constructor with error handling
     */
public static func fromSlice(bytes: Data)throws  -> Curve25519PublicKey  {
    return try  FfiConverterTypeCurve25519PublicKey_lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_constructor_curve25519publickey_from_slice(
        FfiConverterData.lower(bytes),$0
    )
})
}
    

    
    /**
     * View the public key as bytes
     *
     * Pattern: Method returning Vec<u8> (mapped to Swift Data)
     */
open func asBytes() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_curve25519publickey_as_bytes(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Convert the public key to a base64 string
     *
     * Pattern: Method returning primitive type (String)
     */
open func toBase64() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_curve25519publickey_to_base64(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Convert the public key to bytes
     *
     * Pattern: Method returning Vec<u8> (mapped to Swift Data)
     */
open func toBytes() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_curve25519publickey_to_bytes(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Convert the public key to a vector of bytes
     *
     * Pattern: Method returning Vec<u8> (mapped to Swift Data)
     */
open func toVec() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_curve25519publickey_to_vec(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCurve25519PublicKey: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = Curve25519PublicKey

    public static func lift(_ handle: UInt64) throws -> Curve25519PublicKey {
        return Curve25519PublicKey(unsafeFromHandle: handle)
    }

    public static func lower(_ value: Curve25519PublicKey) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Curve25519PublicKey {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: Curve25519PublicKey, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCurve25519PublicKey_lift(_ handle: UInt64) throws -> Curve25519PublicKey {
    return try FfiConverterTypeCurve25519PublicKey.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCurve25519PublicKey_lower(_ value: Curve25519PublicKey) -> UInt64 {
    return FfiConverterTypeCurve25519PublicKey.lower(value)
}






/**
 * Wrapper around vodozemac::Curve25519SecretKey
 *
 * Pattern: Object that returns other objects (demonstrates Arc<OtherObject> pattern)
 */
public protocol Curve25519SecretKeyProtocol: AnyObject, Sendable {
    
    /**
     * Get the public key that corresponds to this secret key
     *
     * Pattern: Method returning Arc<AnotherObject> - CRITICAL for UniFFI
     */
    func publicKey()  -> Curve25519PublicKey
    
    /**
     * Convert the secret key to bytes
     *
     * Pattern: Method returning Vec<u8>
     */
    func toBytes()  -> Data
    
}
/**
 * Wrapper around vodozemac::Curve25519SecretKey
 *
 * Pattern: Object that returns other objects (demonstrates Arc<OtherObject> pattern)
 */
open class Curve25519SecretKey: Curve25519SecretKeyProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_curve25519secretkey(self.handle, $0) }
    }
    /**
     * Generate a new random Curve25519SecretKey
     *
     * Pattern: Simple constructor with no parameters
     */
public convenience init() {
    let handle =
        try! rustCall() {
    uniffi_vodozemac_bindings_fn_constructor_curve25519secretkey_new($0
    )
}
    self.init(unsafeFromHandle: handle)
}

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_curve25519secretkey(handle, $0) }
    }

    
    /**
     * Create a Curve25519SecretKey from exactly 32 bytes
     *
     * Pattern: Constructor with validation (panics on invalid input)
     */
public static func fromSlice(bytes: Data) -> Curve25519SecretKey  {
    return try!  FfiConverterTypeCurve25519SecretKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_constructor_curve25519secretkey_from_slice(
        FfiConverterData.lower(bytes),$0
    )
})
}
    

    
    /**
     * Get the public key that corresponds to this secret key
     *
     * Pattern: Method returning Arc<AnotherObject> - CRITICAL for UniFFI
     */
open func publicKey() -> Curve25519PublicKey  {
    return try!  FfiConverterTypeCurve25519PublicKey_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_curve25519secretkey_public_key(self.uniffiCloneHandle(),$0
    )
})
}
    
    /**
     * Convert the secret key to bytes
     *
     * Pattern: Method returning Vec<u8>
     */
open func toBytes() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_curve25519secretkey_to_bytes(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCurve25519SecretKey: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = Curve25519SecretKey

    public static func lift(_ handle: UInt64) throws -> Curve25519SecretKey {
        return Curve25519SecretKey(unsafeFromHandle: handle)
    }

    public static func lower(_ value: Curve25519SecretKey) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Curve25519SecretKey {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: Curve25519SecretKey, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCurve25519SecretKey_lift(_ handle: UInt64) throws -> Curve25519SecretKey {
    return try FfiConverterTypeCurve25519SecretKey.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCurve25519SecretKey_lower(_ value: Curve25519SecretKey) -> UInt64 {
    return FfiConverterTypeCurve25519SecretKey.lower(value)
}






/**
 * Key ID wrapper for UniFFI
 *
 * Pattern: Simple object with constructor and method
 */
public protocol KeyIdProtocol: AnyObject, Sendable {
    
    /**
     * Convert the KeyId to a base64 string
     *
     * Pattern: Simple method returning primitive type
     */
    func toBase64()  -> String
    
}
/**
 * Key ID wrapper for UniFFI
 *
 * Pattern: Simple object with constructor and method
 */
open class KeyId: KeyIdProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_vodozemac_bindings_fn_clone_keyid(self.handle, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        try! rustCall { uniffi_vodozemac_bindings_fn_free_keyid(handle, $0) }
    }

    
    /**
     * Create a KeyId from a u64 value
     *
     * Pattern: Simple constructor returning Arc<Self>
     */
public static func fromU64(value: UInt64) -> KeyId  {
    return try!  FfiConverterTypeKeyId_lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_constructor_keyid_from_u64(
        FfiConverterUInt64.lower(value),$0
    )
})
}
    

    
    /**
     * Convert the KeyId to a base64 string
     *
     * Pattern: Simple method returning primitive type
     */
open func toBase64() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_method_keyid_to_base64(self.uniffiCloneHandle(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeKeyId: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = KeyId

    public static func lift(_ handle: UInt64) throws -> KeyId {
        return KeyId(unsafeFromHandle: handle)
    }

    public static func lower(_ value: KeyId) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KeyId {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: KeyId, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeKeyId_lift(_ handle: UInt64) throws -> KeyId {
    return try FfiConverterTypeKeyId.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeKeyId_lower(_ value: KeyId) -> UInt64 {
    return FfiConverterTypeKeyId.lower(value)
}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum MessageType {
    
    case normal
    case preKey
}


#if compiler(>=6)
extension MessageType: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMessageType: FfiConverterRustBuffer {
    typealias SwiftType = MessageType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MessageType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .normal
        
        case 2: return .preKey
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: MessageType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .normal:
            writeInt(&buf, Int32(1))
        
        
        case .preKey:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMessageType_lift(_ buf: RustBuffer) throws -> MessageType {
    return try FfiConverterTypeMessageType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMessageType_lower(_ value: MessageType) -> RustBuffer {
    return FfiConverterTypeMessageType.lower(value)
}


extension MessageType: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum SessionOrdering {
    
    case equal
    case better
    case worse
    case unconnected
}


#if compiler(>=6)
extension SessionOrdering: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSessionOrdering: FfiConverterRustBuffer {
    typealias SwiftType = SessionOrdering

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SessionOrdering {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .equal
        
        case 2: return .better
        
        case 3: return .worse
        
        case 4: return .unconnected
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SessionOrdering, into buf: inout [UInt8]) {
        switch value {
        
        
        case .equal:
            writeInt(&buf, Int32(1))
        
        
        case .better:
            writeInt(&buf, Int32(2))
        
        
        case .worse:
            writeInt(&buf, Int32(3))
        
        
        case .unconnected:
            writeInt(&buf, Int32(4))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionOrdering_lift(_ buf: RustBuffer) throws -> SessionOrdering {
    return try FfiConverterTypeSessionOrdering.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionOrdering_lower(_ value: SessionOrdering) -> RustBuffer {
    return FfiConverterTypeSessionOrdering.lower(value)
}


extension SessionOrdering: Equatable, Hashable {}







public enum VodozemacError: Swift.Error {

    
    
    case Base64Decode(message: String)
    
    case ProtoBufDecode(message: String)
    
    case Decode(message: String)
    
    case DehydratedDevice(message: String)
    
    case Key(message: String)
    
    case LibolmPickle(message: String)
    
    case Pickle(message: String)
    
    case Signature(message: String)
    
    case Ecies(message: String)
    
    case MegolmDecryption(message: String)
    
    case OlmDecryption(message: String)
    
    case SessionCreation(message: String)
    
    case SessionKeyDecode(message: String)
    
    case Sas(message: String)
    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeVodozemacError: FfiConverterRustBuffer {
    typealias SwiftType = VodozemacError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VodozemacError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Base64Decode(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .ProtoBufDecode(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .Decode(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .DehydratedDevice(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .Key(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .LibolmPickle(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .Pickle(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 8: return .Signature(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 9: return .Ecies(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 10: return .MegolmDecryption(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 11: return .OlmDecryption(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 12: return .SessionCreation(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 13: return .SessionKeyDecode(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 14: return .Sas(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: VodozemacError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .Base64Decode(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .ProtoBufDecode(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .Decode(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .DehydratedDevice(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .Key(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))
        case .LibolmPickle(_ /* message is ignored*/):
            writeInt(&buf, Int32(6))
        case .Pickle(_ /* message is ignored*/):
            writeInt(&buf, Int32(7))
        case .Signature(_ /* message is ignored*/):
            writeInt(&buf, Int32(8))
        case .Ecies(_ /* message is ignored*/):
            writeInt(&buf, Int32(9))
        case .MegolmDecryption(_ /* message is ignored*/):
            writeInt(&buf, Int32(10))
        case .OlmDecryption(_ /* message is ignored*/):
            writeInt(&buf, Int32(11))
        case .SessionCreation(_ /* message is ignored*/):
            writeInt(&buf, Int32(12))
        case .SessionKeyDecode(_ /* message is ignored*/):
            writeInt(&buf, Int32(13))
        case .Sas(_ /* message is ignored*/):
            writeInt(&buf, Int32(14))

        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVodozemacError_lift(_ buf: RustBuffer) throws -> VodozemacError {
    return try FfiConverterTypeVodozemacError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVodozemacError_lower(_ value: VodozemacError) -> RustBuffer {
    return FfiConverterTypeVodozemacError.lower(value)
}


extension VodozemacError: Equatable, Hashable {}




extension VodozemacError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}



public func base64Decode(input: String)throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeVodozemacError_lift) {
    uniffi_vodozemac_bindings_fn_func_base64_decode(
        FfiConverterString.lower(input),$0
    )
})
}
public func base64Encode(input: Data) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_func_base64_encode(
        FfiConverterData.lower(input),$0
    )
})
}
public func getVersion() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_vodozemac_bindings_fn_func_get_version($0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_vodozemac_bindings_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_func_base64_decode() != 3805) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_func_base64_encode() != 38810) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_func_get_version() != 41157) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_curve25519publickey_as_bytes() != 31053) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_curve25519publickey_to_base64() != 25568) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_curve25519publickey_to_bytes() != 51368) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_curve25519publickey_to_vec() != 30420) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_curve25519secretkey_public_key() != 57764) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_curve25519secretkey_to_bytes() != 6874) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_method_keyid_to_base64() != 49710) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_curve25519publickey_from_base64() != 44436) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_curve25519publickey_from_bytes() != 14862) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_curve25519publickey_from_slice() != 37334) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_curve25519secretkey_from_slice() != 4143) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_curve25519secretkey_new() != 44920) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_vodozemac_bindings_checksum_constructor_keyid_from_u64() != 55467) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureVodozemacBindingsInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all